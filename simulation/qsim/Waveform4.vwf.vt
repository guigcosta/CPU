// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/13/2016 13:19:19"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Teste2
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Teste2_vlg_sample_tst(
	clock,
	imediato,
	reset,
	sampler_tx
);
input  clock;
input [31:0] imediato;
input  reset;
output sampler_tx;

reg sample;
time current_time;
always @(clock or imediato or reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Teste2_vlg_check_tst (
	dados_escrita,
	end_coluna,
	end_linha,
	out,
	PCflag,
	saida,
	saidaRAMdados,
	store,
	writeRAMdados,
	writeReg,
	sampler_rx
);
input [31:0] dados_escrita;
input [10:0] end_coluna;
input [10:0] end_linha;
input [31:0] out;
input [1:0] PCflag;
input [31:0] saida;
input [31:0] saidaRAMdados;
input [31:0] store;
input  writeRAMdados;
input  writeReg;
input sampler_rx;

reg [31:0] dados_escrita_expected;
reg [10:0] end_coluna_expected;
reg [10:0] end_linha_expected;
reg [31:0] out_expected;
reg [1:0] PCflag_expected;
reg [31:0] saida_expected;
reg [31:0] saidaRAMdados_expected;
reg [31:0] store_expected;
reg  writeRAMdados_expected;
reg  writeReg_expected;

reg [31:0] dados_escrita_prev;
reg [10:0] end_coluna_prev;
reg [10:0] end_linha_prev;
reg [31:0] out_prev;
reg [1:0] PCflag_prev;
reg [31:0] saida_prev;
reg [31:0] saidaRAMdados_prev;
reg [31:0] store_prev;
reg  writeRAMdados_prev;
reg  writeReg_prev;

reg [31:0] dados_escrita_expected_prev;
reg [10:0] end_coluna_expected_prev;
reg [10:0] end_linha_expected_prev;
reg [31:0] out_expected_prev;
reg [1:0] PCflag_expected_prev;
reg [31:0] saida_expected_prev;
reg [31:0] saidaRAMdados_expected_prev;
reg [31:0] store_expected_prev;
reg  writeRAMdados_expected_prev;
reg  writeReg_expected_prev;

reg [31:0] last_dados_escrita_exp;
reg [10:0] last_end_coluna_exp;
reg [10:0] last_end_linha_exp;
reg [31:0] last_out_exp;
reg [1:0] last_PCflag_exp;
reg [31:0] last_saida_exp;
reg [31:0] last_saidaRAMdados_exp;
reg [31:0] last_store_exp;
reg  last_writeRAMdados_exp;
reg  last_writeReg_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:10] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 10'b1;
end

// update real /o prevs

always @(trigger)
begin
	dados_escrita_prev = dados_escrita;
	end_coluna_prev = end_coluna;
	end_linha_prev = end_linha;
	out_prev = out;
	PCflag_prev = PCflag;
	saida_prev = saida;
	saidaRAMdados_prev = saidaRAMdados;
	store_prev = store;
	writeRAMdados_prev = writeRAMdados;
	writeReg_prev = writeReg;
end

// update expected /o prevs

always @(trigger)
begin
	dados_escrita_expected_prev = dados_escrita_expected;
	end_coluna_expected_prev = end_coluna_expected;
	end_linha_expected_prev = end_linha_expected;
	out_expected_prev = out_expected;
	PCflag_expected_prev = PCflag_expected;
	saida_expected_prev = saida_expected;
	saidaRAMdados_expected_prev = saidaRAMdados_expected;
	store_expected_prev = store_expected;
	writeRAMdados_expected_prev = writeRAMdados_expected;
	writeReg_expected_prev = writeReg_expected;
end


// expected end_linha[ 10 ]
initial
begin
	end_linha_expected[10] = 1'bX;
end 
// expected end_linha[ 9 ]
initial
begin
	end_linha_expected[9] = 1'bX;
end 
// expected end_linha[ 8 ]
initial
begin
	end_linha_expected[8] = 1'bX;
end 
// expected end_linha[ 7 ]
initial
begin
	end_linha_expected[7] = 1'bX;
end 
// expected end_linha[ 6 ]
initial
begin
	end_linha_expected[6] = 1'bX;
end 
// expected end_linha[ 5 ]
initial
begin
	end_linha_expected[5] = 1'bX;
end 
// expected end_linha[ 4 ]
initial
begin
	end_linha_expected[4] = 1'bX;
end 
// expected end_linha[ 3 ]
initial
begin
	end_linha_expected[3] = 1'bX;
end 
// expected end_linha[ 2 ]
initial
begin
	end_linha_expected[2] = 1'bX;
end 
// expected end_linha[ 1 ]
initial
begin
	end_linha_expected[1] = 1'bX;
end 
// expected end_linha[ 0 ]
initial
begin
	end_linha_expected[0] = 1'bX;
end 
// expected end_coluna[ 10 ]
initial
begin
	end_coluna_expected[10] = 1'bX;
end 
// expected end_coluna[ 9 ]
initial
begin
	end_coluna_expected[9] = 1'bX;
end 
// expected end_coluna[ 8 ]
initial
begin
	end_coluna_expected[8] = 1'bX;
end 
// expected end_coluna[ 7 ]
initial
begin
	end_coluna_expected[7] = 1'bX;
end 
// expected end_coluna[ 6 ]
initial
begin
	end_coluna_expected[6] = 1'bX;
end 
// expected end_coluna[ 5 ]
initial
begin
	end_coluna_expected[5] = 1'bX;
end 
// expected end_coluna[ 4 ]
initial
begin
	end_coluna_expected[4] = 1'bX;
end 
// expected end_coluna[ 3 ]
initial
begin
	end_coluna_expected[3] = 1'bX;
end 
// expected end_coluna[ 2 ]
initial
begin
	end_coluna_expected[2] = 1'bX;
end 
// expected end_coluna[ 1 ]
initial
begin
	end_coluna_expected[1] = 1'bX;
end 
// expected end_coluna[ 0 ]
initial
begin
	end_coluna_expected[0] = 1'bX;
end 
// expected saida[ 31 ]
initial
begin
	saida_expected[31] = 1'bX;
end 
// expected saida[ 30 ]
initial
begin
	saida_expected[30] = 1'bX;
end 
// expected saida[ 29 ]
initial
begin
	saida_expected[29] = 1'bX;
end 
// expected saida[ 28 ]
initial
begin
	saida_expected[28] = 1'bX;
end 
// expected saida[ 27 ]
initial
begin
	saida_expected[27] = 1'bX;
end 
// expected saida[ 26 ]
initial
begin
	saida_expected[26] = 1'bX;
end 
// expected saida[ 25 ]
initial
begin
	saida_expected[25] = 1'bX;
end 
// expected saida[ 24 ]
initial
begin
	saida_expected[24] = 1'bX;
end 
// expected saida[ 23 ]
initial
begin
	saida_expected[23] = 1'bX;
end 
// expected saida[ 22 ]
initial
begin
	saida_expected[22] = 1'bX;
end 
// expected saida[ 21 ]
initial
begin
	saida_expected[21] = 1'bX;
end 
// expected saida[ 20 ]
initial
begin
	saida_expected[20] = 1'bX;
end 
// expected saida[ 19 ]
initial
begin
	saida_expected[19] = 1'bX;
end 
// expected saida[ 18 ]
initial
begin
	saida_expected[18] = 1'bX;
end 
// expected saida[ 17 ]
initial
begin
	saida_expected[17] = 1'bX;
end 
// expected saida[ 16 ]
initial
begin
	saida_expected[16] = 1'bX;
end 
// expected saida[ 15 ]
initial
begin
	saida_expected[15] = 1'bX;
end 
// expected saida[ 14 ]
initial
begin
	saida_expected[14] = 1'bX;
end 
// expected saida[ 13 ]
initial
begin
	saida_expected[13] = 1'bX;
end 
// expected saida[ 12 ]
initial
begin
	saida_expected[12] = 1'bX;
end 
// expected saida[ 11 ]
initial
begin
	saida_expected[11] = 1'bX;
end 
// expected saida[ 10 ]
initial
begin
	saida_expected[10] = 1'bX;
end 
// expected saida[ 9 ]
initial
begin
	saida_expected[9] = 1'bX;
end 
// expected saida[ 8 ]
initial
begin
	saida_expected[8] = 1'bX;
end 
// expected saida[ 7 ]
initial
begin
	saida_expected[7] = 1'bX;
end 
// expected saida[ 6 ]
initial
begin
	saida_expected[6] = 1'bX;
end 
// expected saida[ 5 ]
initial
begin
	saida_expected[5] = 1'bX;
end 
// expected saida[ 4 ]
initial
begin
	saida_expected[4] = 1'bX;
end 
// expected saida[ 3 ]
initial
begin
	saida_expected[3] = 1'bX;
end 
// expected saida[ 2 ]
initial
begin
	saida_expected[2] = 1'bX;
end 
// expected saida[ 1 ]
initial
begin
	saida_expected[1] = 1'bX;
end 
// expected saida[ 0 ]
initial
begin
	saida_expected[0] = 1'bX;
end 
// expected store[ 31 ]
initial
begin
	store_expected[31] = 1'bX;
end 
// expected store[ 30 ]
initial
begin
	store_expected[30] = 1'bX;
end 
// expected store[ 29 ]
initial
begin
	store_expected[29] = 1'bX;
end 
// expected store[ 28 ]
initial
begin
	store_expected[28] = 1'bX;
end 
// expected store[ 27 ]
initial
begin
	store_expected[27] = 1'bX;
end 
// expected store[ 26 ]
initial
begin
	store_expected[26] = 1'bX;
end 
// expected store[ 25 ]
initial
begin
	store_expected[25] = 1'bX;
end 
// expected store[ 24 ]
initial
begin
	store_expected[24] = 1'bX;
end 
// expected store[ 23 ]
initial
begin
	store_expected[23] = 1'bX;
end 
// expected store[ 22 ]
initial
begin
	store_expected[22] = 1'bX;
end 
// expected store[ 21 ]
initial
begin
	store_expected[21] = 1'bX;
end 
// expected store[ 20 ]
initial
begin
	store_expected[20] = 1'bX;
end 
// expected store[ 19 ]
initial
begin
	store_expected[19] = 1'bX;
end 
// expected store[ 18 ]
initial
begin
	store_expected[18] = 1'bX;
end 
// expected store[ 17 ]
initial
begin
	store_expected[17] = 1'bX;
end 
// expected store[ 16 ]
initial
begin
	store_expected[16] = 1'bX;
end 
// expected store[ 15 ]
initial
begin
	store_expected[15] = 1'bX;
end 
// expected store[ 14 ]
initial
begin
	store_expected[14] = 1'bX;
end 
// expected store[ 13 ]
initial
begin
	store_expected[13] = 1'bX;
end 
// expected store[ 12 ]
initial
begin
	store_expected[12] = 1'bX;
end 
// expected store[ 11 ]
initial
begin
	store_expected[11] = 1'bX;
end 
// expected store[ 10 ]
initial
begin
	store_expected[10] = 1'bX;
end 
// expected store[ 9 ]
initial
begin
	store_expected[9] = 1'bX;
end 
// expected store[ 8 ]
initial
begin
	store_expected[8] = 1'bX;
end 
// expected store[ 7 ]
initial
begin
	store_expected[7] = 1'bX;
end 
// expected store[ 6 ]
initial
begin
	store_expected[6] = 1'bX;
end 
// expected store[ 5 ]
initial
begin
	store_expected[5] = 1'bX;
end 
// expected store[ 4 ]
initial
begin
	store_expected[4] = 1'bX;
end 
// expected store[ 3 ]
initial
begin
	store_expected[3] = 1'bX;
end 
// expected store[ 2 ]
initial
begin
	store_expected[2] = 1'bX;
end 
// expected store[ 1 ]
initial
begin
	store_expected[1] = 1'bX;
end 
// expected store[ 0 ]
initial
begin
	store_expected[0] = 1'bX;
end 

// expected writeReg
initial
begin
	writeReg_expected = 1'bX;
end 
// expected dados_escrita[ 31 ]
initial
begin
	dados_escrita_expected[31] = 1'bX;
end 
// expected dados_escrita[ 30 ]
initial
begin
	dados_escrita_expected[30] = 1'bX;
end 
// expected dados_escrita[ 29 ]
initial
begin
	dados_escrita_expected[29] = 1'bX;
end 
// expected dados_escrita[ 28 ]
initial
begin
	dados_escrita_expected[28] = 1'bX;
end 
// expected dados_escrita[ 27 ]
initial
begin
	dados_escrita_expected[27] = 1'bX;
end 
// expected dados_escrita[ 26 ]
initial
begin
	dados_escrita_expected[26] = 1'bX;
end 
// expected dados_escrita[ 25 ]
initial
begin
	dados_escrita_expected[25] = 1'bX;
end 
// expected dados_escrita[ 24 ]
initial
begin
	dados_escrita_expected[24] = 1'bX;
end 
// expected dados_escrita[ 23 ]
initial
begin
	dados_escrita_expected[23] = 1'bX;
end 
// expected dados_escrita[ 22 ]
initial
begin
	dados_escrita_expected[22] = 1'bX;
end 
// expected dados_escrita[ 21 ]
initial
begin
	dados_escrita_expected[21] = 1'bX;
end 
// expected dados_escrita[ 20 ]
initial
begin
	dados_escrita_expected[20] = 1'bX;
end 
// expected dados_escrita[ 19 ]
initial
begin
	dados_escrita_expected[19] = 1'bX;
end 
// expected dados_escrita[ 18 ]
initial
begin
	dados_escrita_expected[18] = 1'bX;
end 
// expected dados_escrita[ 17 ]
initial
begin
	dados_escrita_expected[17] = 1'bX;
end 
// expected dados_escrita[ 16 ]
initial
begin
	dados_escrita_expected[16] = 1'bX;
end 
// expected dados_escrita[ 15 ]
initial
begin
	dados_escrita_expected[15] = 1'bX;
end 
// expected dados_escrita[ 14 ]
initial
begin
	dados_escrita_expected[14] = 1'bX;
end 
// expected dados_escrita[ 13 ]
initial
begin
	dados_escrita_expected[13] = 1'bX;
end 
// expected dados_escrita[ 12 ]
initial
begin
	dados_escrita_expected[12] = 1'bX;
end 
// expected dados_escrita[ 11 ]
initial
begin
	dados_escrita_expected[11] = 1'bX;
end 
// expected dados_escrita[ 10 ]
initial
begin
	dados_escrita_expected[10] = 1'bX;
end 
// expected dados_escrita[ 9 ]
initial
begin
	dados_escrita_expected[9] = 1'bX;
end 
// expected dados_escrita[ 8 ]
initial
begin
	dados_escrita_expected[8] = 1'bX;
end 
// expected dados_escrita[ 7 ]
initial
begin
	dados_escrita_expected[7] = 1'bX;
end 
// expected dados_escrita[ 6 ]
initial
begin
	dados_escrita_expected[6] = 1'bX;
end 
// expected dados_escrita[ 5 ]
initial
begin
	dados_escrita_expected[5] = 1'bX;
end 
// expected dados_escrita[ 4 ]
initial
begin
	dados_escrita_expected[4] = 1'bX;
end 
// expected dados_escrita[ 3 ]
initial
begin
	dados_escrita_expected[3] = 1'bX;
end 
// expected dados_escrita[ 2 ]
initial
begin
	dados_escrita_expected[2] = 1'bX;
end 
// expected dados_escrita[ 1 ]
initial
begin
	dados_escrita_expected[1] = 1'bX;
end 
// expected dados_escrita[ 0 ]
initial
begin
	dados_escrita_expected[0] = 1'bX;
end 
// expected out[ 31 ]
initial
begin
	out_expected[31] = 1'bX;
end 
// expected out[ 30 ]
initial
begin
	out_expected[30] = 1'bX;
end 
// expected out[ 29 ]
initial
begin
	out_expected[29] = 1'bX;
end 
// expected out[ 28 ]
initial
begin
	out_expected[28] = 1'bX;
end 
// expected out[ 27 ]
initial
begin
	out_expected[27] = 1'bX;
end 
// expected out[ 26 ]
initial
begin
	out_expected[26] = 1'bX;
end 
// expected out[ 25 ]
initial
begin
	out_expected[25] = 1'bX;
end 
// expected out[ 24 ]
initial
begin
	out_expected[24] = 1'bX;
end 
// expected out[ 23 ]
initial
begin
	out_expected[23] = 1'bX;
end 
// expected out[ 22 ]
initial
begin
	out_expected[22] = 1'bX;
end 
// expected out[ 21 ]
initial
begin
	out_expected[21] = 1'bX;
end 
// expected out[ 20 ]
initial
begin
	out_expected[20] = 1'bX;
end 
// expected out[ 19 ]
initial
begin
	out_expected[19] = 1'bX;
end 
// expected out[ 18 ]
initial
begin
	out_expected[18] = 1'bX;
end 
// expected out[ 17 ]
initial
begin
	out_expected[17] = 1'bX;
end 
// expected out[ 16 ]
initial
begin
	out_expected[16] = 1'bX;
end 
// expected out[ 15 ]
initial
begin
	out_expected[15] = 1'bX;
end 
// expected out[ 14 ]
initial
begin
	out_expected[14] = 1'bX;
end 
// expected out[ 13 ]
initial
begin
	out_expected[13] = 1'bX;
end 
// expected out[ 12 ]
initial
begin
	out_expected[12] = 1'bX;
end 
// expected out[ 11 ]
initial
begin
	out_expected[11] = 1'bX;
end 
// expected out[ 10 ]
initial
begin
	out_expected[10] = 1'bX;
end 
// expected out[ 9 ]
initial
begin
	out_expected[9] = 1'bX;
end 
// expected out[ 8 ]
initial
begin
	out_expected[8] = 1'bX;
end 
// expected out[ 7 ]
initial
begin
	out_expected[7] = 1'bX;
end 
// expected out[ 6 ]
initial
begin
	out_expected[6] = 1'bX;
end 
// expected out[ 5 ]
initial
begin
	out_expected[5] = 1'bX;
end 
// expected out[ 4 ]
initial
begin
	out_expected[4] = 1'bX;
end 
// expected out[ 3 ]
initial
begin
	out_expected[3] = 1'bX;
end 
// expected out[ 2 ]
initial
begin
	out_expected[2] = 1'bX;
end 
// expected out[ 1 ]
initial
begin
	out_expected[1] = 1'bX;
end 
// expected out[ 0 ]
initial
begin
	out_expected[0] = 1'bX;
end 
// expected PCflag[ 1 ]
initial
begin
	PCflag_expected[1] = 1'bX;
end 
// expected PCflag[ 0 ]
initial
begin
	PCflag_expected[0] = 1'bX;
end 
// expected saidaRAMdados[ 31 ]
initial
begin
	saidaRAMdados_expected[31] = 1'bX;
end 
// expected saidaRAMdados[ 30 ]
initial
begin
	saidaRAMdados_expected[30] = 1'bX;
end 
// expected saidaRAMdados[ 29 ]
initial
begin
	saidaRAMdados_expected[29] = 1'bX;
end 
// expected saidaRAMdados[ 28 ]
initial
begin
	saidaRAMdados_expected[28] = 1'bX;
end 
// expected saidaRAMdados[ 27 ]
initial
begin
	saidaRAMdados_expected[27] = 1'bX;
end 
// expected saidaRAMdados[ 26 ]
initial
begin
	saidaRAMdados_expected[26] = 1'bX;
end 
// expected saidaRAMdados[ 25 ]
initial
begin
	saidaRAMdados_expected[25] = 1'bX;
end 
// expected saidaRAMdados[ 24 ]
initial
begin
	saidaRAMdados_expected[24] = 1'bX;
end 
// expected saidaRAMdados[ 23 ]
initial
begin
	saidaRAMdados_expected[23] = 1'bX;
end 
// expected saidaRAMdados[ 22 ]
initial
begin
	saidaRAMdados_expected[22] = 1'bX;
end 
// expected saidaRAMdados[ 21 ]
initial
begin
	saidaRAMdados_expected[21] = 1'bX;
end 
// expected saidaRAMdados[ 20 ]
initial
begin
	saidaRAMdados_expected[20] = 1'bX;
end 
// expected saidaRAMdados[ 19 ]
initial
begin
	saidaRAMdados_expected[19] = 1'bX;
end 
// expected saidaRAMdados[ 18 ]
initial
begin
	saidaRAMdados_expected[18] = 1'bX;
end 
// expected saidaRAMdados[ 17 ]
initial
begin
	saidaRAMdados_expected[17] = 1'bX;
end 
// expected saidaRAMdados[ 16 ]
initial
begin
	saidaRAMdados_expected[16] = 1'bX;
end 
// expected saidaRAMdados[ 15 ]
initial
begin
	saidaRAMdados_expected[15] = 1'bX;
end 
// expected saidaRAMdados[ 14 ]
initial
begin
	saidaRAMdados_expected[14] = 1'bX;
end 
// expected saidaRAMdados[ 13 ]
initial
begin
	saidaRAMdados_expected[13] = 1'bX;
end 
// expected saidaRAMdados[ 12 ]
initial
begin
	saidaRAMdados_expected[12] = 1'bX;
end 
// expected saidaRAMdados[ 11 ]
initial
begin
	saidaRAMdados_expected[11] = 1'bX;
end 
// expected saidaRAMdados[ 10 ]
initial
begin
	saidaRAMdados_expected[10] = 1'bX;
end 
// expected saidaRAMdados[ 9 ]
initial
begin
	saidaRAMdados_expected[9] = 1'bX;
end 
// expected saidaRAMdados[ 8 ]
initial
begin
	saidaRAMdados_expected[8] = 1'bX;
end 
// expected saidaRAMdados[ 7 ]
initial
begin
	saidaRAMdados_expected[7] = 1'bX;
end 
// expected saidaRAMdados[ 6 ]
initial
begin
	saidaRAMdados_expected[6] = 1'bX;
end 
// expected saidaRAMdados[ 5 ]
initial
begin
	saidaRAMdados_expected[5] = 1'bX;
end 
// expected saidaRAMdados[ 4 ]
initial
begin
	saidaRAMdados_expected[4] = 1'bX;
end 
// expected saidaRAMdados[ 3 ]
initial
begin
	saidaRAMdados_expected[3] = 1'bX;
end 
// expected saidaRAMdados[ 2 ]
initial
begin
	saidaRAMdados_expected[2] = 1'bX;
end 
// expected saidaRAMdados[ 1 ]
initial
begin
	saidaRAMdados_expected[1] = 1'bX;
end 
// expected saidaRAMdados[ 0 ]
initial
begin
	saidaRAMdados_expected[0] = 1'bX;
end 

// expected writeRAMdados
initial
begin
	writeRAMdados_expected = 1'bX;
end 
// generate trigger
always @(dados_escrita_expected or dados_escrita or end_coluna_expected or end_coluna or end_linha_expected or end_linha or out_expected or out or PCflag_expected or PCflag or saida_expected or saida or saidaRAMdados_expected or saidaRAMdados or store_expected or store or writeRAMdados_expected or writeRAMdados or writeReg_expected or writeReg)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected dados_escrita = %b | expected end_coluna = %b | expected end_linha = %b | expected out = %b | expected PCflag = %b | expected saida = %b | expected saidaRAMdados = %b | expected store = %b | expected writeRAMdados = %b | expected writeReg = %b | ",dados_escrita_expected_prev,end_coluna_expected_prev,end_linha_expected_prev,out_expected_prev,PCflag_expected_prev,saida_expected_prev,saidaRAMdados_expected_prev,store_expected_prev,writeRAMdados_expected_prev,writeReg_expected_prev);
	$display("| real dados_escrita = %b | real end_coluna = %b | real end_linha = %b | real out = %b | real PCflag = %b | real saida = %b | real saidaRAMdados = %b | real store = %b | real writeRAMdados = %b | real writeReg = %b | ",dados_escrita_prev,end_coluna_prev,end_linha_prev,out_prev,PCflag_prev,saida_prev,saidaRAMdados_prev,store_prev,writeRAMdados_prev,writeReg_prev);
`endif
	if (
		( dados_escrita_expected_prev[0] !== 1'bx ) && ( dados_escrita_prev[0] !== dados_escrita_expected_prev[0] )
		&& ((dados_escrita_expected_prev[0] !== last_dados_escrita_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dados_escrita[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dados_escrita_expected_prev);
		$display ("     Real value = %b", dados_escrita_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dados_escrita_exp[0] = dados_escrita_expected_prev[0];
	end
	if (
		( dados_escrita_expected_prev[1] !== 1'bx ) && ( dados_escrita_prev[1] !== dados_escrita_expected_prev[1] )
		&& ((dados_escrita_expected_prev[1] !== last_dados_escrita_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dados_escrita[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dados_escrita_expected_prev);
		$display ("     Real value = %b", dados_escrita_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dados_escrita_exp[1] = dados_escrita_expected_prev[1];
	end
	if (
		( dados_escrita_expected_prev[2] !== 1'bx ) && ( dados_escrita_prev[2] !== dados_escrita_expected_prev[2] )
		&& ((dados_escrita_expected_prev[2] !== last_dados_escrita_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dados_escrita[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dados_escrita_expected_prev);
		$display ("     Real value = %b", dados_escrita_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dados_escrita_exp[2] = dados_escrita_expected_prev[2];
	end
	if (
		( dados_escrita_expected_prev[3] !== 1'bx ) && ( dados_escrita_prev[3] !== dados_escrita_expected_prev[3] )
		&& ((dados_escrita_expected_prev[3] !== last_dados_escrita_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dados_escrita[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dados_escrita_expected_prev);
		$display ("     Real value = %b", dados_escrita_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dados_escrita_exp[3] = dados_escrita_expected_prev[3];
	end
	if (
		( dados_escrita_expected_prev[4] !== 1'bx ) && ( dados_escrita_prev[4] !== dados_escrita_expected_prev[4] )
		&& ((dados_escrita_expected_prev[4] !== last_dados_escrita_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dados_escrita[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dados_escrita_expected_prev);
		$display ("     Real value = %b", dados_escrita_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dados_escrita_exp[4] = dados_escrita_expected_prev[4];
	end
	if (
		( dados_escrita_expected_prev[5] !== 1'bx ) && ( dados_escrita_prev[5] !== dados_escrita_expected_prev[5] )
		&& ((dados_escrita_expected_prev[5] !== last_dados_escrita_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dados_escrita[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dados_escrita_expected_prev);
		$display ("     Real value = %b", dados_escrita_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dados_escrita_exp[5] = dados_escrita_expected_prev[5];
	end
	if (
		( dados_escrita_expected_prev[6] !== 1'bx ) && ( dados_escrita_prev[6] !== dados_escrita_expected_prev[6] )
		&& ((dados_escrita_expected_prev[6] !== last_dados_escrita_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dados_escrita[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dados_escrita_expected_prev);
		$display ("     Real value = %b", dados_escrita_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dados_escrita_exp[6] = dados_escrita_expected_prev[6];
	end
	if (
		( dados_escrita_expected_prev[7] !== 1'bx ) && ( dados_escrita_prev[7] !== dados_escrita_expected_prev[7] )
		&& ((dados_escrita_expected_prev[7] !== last_dados_escrita_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dados_escrita[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dados_escrita_expected_prev);
		$display ("     Real value = %b", dados_escrita_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dados_escrita_exp[7] = dados_escrita_expected_prev[7];
	end
	if (
		( dados_escrita_expected_prev[8] !== 1'bx ) && ( dados_escrita_prev[8] !== dados_escrita_expected_prev[8] )
		&& ((dados_escrita_expected_prev[8] !== last_dados_escrita_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dados_escrita[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dados_escrita_expected_prev);
		$display ("     Real value = %b", dados_escrita_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dados_escrita_exp[8] = dados_escrita_expected_prev[8];
	end
	if (
		( dados_escrita_expected_prev[9] !== 1'bx ) && ( dados_escrita_prev[9] !== dados_escrita_expected_prev[9] )
		&& ((dados_escrita_expected_prev[9] !== last_dados_escrita_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dados_escrita[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dados_escrita_expected_prev);
		$display ("     Real value = %b", dados_escrita_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dados_escrita_exp[9] = dados_escrita_expected_prev[9];
	end
	if (
		( dados_escrita_expected_prev[10] !== 1'bx ) && ( dados_escrita_prev[10] !== dados_escrita_expected_prev[10] )
		&& ((dados_escrita_expected_prev[10] !== last_dados_escrita_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dados_escrita[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dados_escrita_expected_prev);
		$display ("     Real value = %b", dados_escrita_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dados_escrita_exp[10] = dados_escrita_expected_prev[10];
	end
	if (
		( dados_escrita_expected_prev[11] !== 1'bx ) && ( dados_escrita_prev[11] !== dados_escrita_expected_prev[11] )
		&& ((dados_escrita_expected_prev[11] !== last_dados_escrita_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dados_escrita[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dados_escrita_expected_prev);
		$display ("     Real value = %b", dados_escrita_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dados_escrita_exp[11] = dados_escrita_expected_prev[11];
	end
	if (
		( dados_escrita_expected_prev[12] !== 1'bx ) && ( dados_escrita_prev[12] !== dados_escrita_expected_prev[12] )
		&& ((dados_escrita_expected_prev[12] !== last_dados_escrita_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dados_escrita[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dados_escrita_expected_prev);
		$display ("     Real value = %b", dados_escrita_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dados_escrita_exp[12] = dados_escrita_expected_prev[12];
	end
	if (
		( dados_escrita_expected_prev[13] !== 1'bx ) && ( dados_escrita_prev[13] !== dados_escrita_expected_prev[13] )
		&& ((dados_escrita_expected_prev[13] !== last_dados_escrita_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dados_escrita[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dados_escrita_expected_prev);
		$display ("     Real value = %b", dados_escrita_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dados_escrita_exp[13] = dados_escrita_expected_prev[13];
	end
	if (
		( dados_escrita_expected_prev[14] !== 1'bx ) && ( dados_escrita_prev[14] !== dados_escrita_expected_prev[14] )
		&& ((dados_escrita_expected_prev[14] !== last_dados_escrita_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dados_escrita[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dados_escrita_expected_prev);
		$display ("     Real value = %b", dados_escrita_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dados_escrita_exp[14] = dados_escrita_expected_prev[14];
	end
	if (
		( dados_escrita_expected_prev[15] !== 1'bx ) && ( dados_escrita_prev[15] !== dados_escrita_expected_prev[15] )
		&& ((dados_escrita_expected_prev[15] !== last_dados_escrita_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dados_escrita[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dados_escrita_expected_prev);
		$display ("     Real value = %b", dados_escrita_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dados_escrita_exp[15] = dados_escrita_expected_prev[15];
	end
	if (
		( dados_escrita_expected_prev[16] !== 1'bx ) && ( dados_escrita_prev[16] !== dados_escrita_expected_prev[16] )
		&& ((dados_escrita_expected_prev[16] !== last_dados_escrita_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dados_escrita[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dados_escrita_expected_prev);
		$display ("     Real value = %b", dados_escrita_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dados_escrita_exp[16] = dados_escrita_expected_prev[16];
	end
	if (
		( dados_escrita_expected_prev[17] !== 1'bx ) && ( dados_escrita_prev[17] !== dados_escrita_expected_prev[17] )
		&& ((dados_escrita_expected_prev[17] !== last_dados_escrita_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dados_escrita[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dados_escrita_expected_prev);
		$display ("     Real value = %b", dados_escrita_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dados_escrita_exp[17] = dados_escrita_expected_prev[17];
	end
	if (
		( dados_escrita_expected_prev[18] !== 1'bx ) && ( dados_escrita_prev[18] !== dados_escrita_expected_prev[18] )
		&& ((dados_escrita_expected_prev[18] !== last_dados_escrita_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dados_escrita[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dados_escrita_expected_prev);
		$display ("     Real value = %b", dados_escrita_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dados_escrita_exp[18] = dados_escrita_expected_prev[18];
	end
	if (
		( dados_escrita_expected_prev[19] !== 1'bx ) && ( dados_escrita_prev[19] !== dados_escrita_expected_prev[19] )
		&& ((dados_escrita_expected_prev[19] !== last_dados_escrita_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dados_escrita[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dados_escrita_expected_prev);
		$display ("     Real value = %b", dados_escrita_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dados_escrita_exp[19] = dados_escrita_expected_prev[19];
	end
	if (
		( dados_escrita_expected_prev[20] !== 1'bx ) && ( dados_escrita_prev[20] !== dados_escrita_expected_prev[20] )
		&& ((dados_escrita_expected_prev[20] !== last_dados_escrita_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dados_escrita[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dados_escrita_expected_prev);
		$display ("     Real value = %b", dados_escrita_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dados_escrita_exp[20] = dados_escrita_expected_prev[20];
	end
	if (
		( dados_escrita_expected_prev[21] !== 1'bx ) && ( dados_escrita_prev[21] !== dados_escrita_expected_prev[21] )
		&& ((dados_escrita_expected_prev[21] !== last_dados_escrita_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dados_escrita[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dados_escrita_expected_prev);
		$display ("     Real value = %b", dados_escrita_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dados_escrita_exp[21] = dados_escrita_expected_prev[21];
	end
	if (
		( dados_escrita_expected_prev[22] !== 1'bx ) && ( dados_escrita_prev[22] !== dados_escrita_expected_prev[22] )
		&& ((dados_escrita_expected_prev[22] !== last_dados_escrita_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dados_escrita[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dados_escrita_expected_prev);
		$display ("     Real value = %b", dados_escrita_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dados_escrita_exp[22] = dados_escrita_expected_prev[22];
	end
	if (
		( dados_escrita_expected_prev[23] !== 1'bx ) && ( dados_escrita_prev[23] !== dados_escrita_expected_prev[23] )
		&& ((dados_escrita_expected_prev[23] !== last_dados_escrita_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dados_escrita[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dados_escrita_expected_prev);
		$display ("     Real value = %b", dados_escrita_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dados_escrita_exp[23] = dados_escrita_expected_prev[23];
	end
	if (
		( dados_escrita_expected_prev[24] !== 1'bx ) && ( dados_escrita_prev[24] !== dados_escrita_expected_prev[24] )
		&& ((dados_escrita_expected_prev[24] !== last_dados_escrita_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dados_escrita[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dados_escrita_expected_prev);
		$display ("     Real value = %b", dados_escrita_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dados_escrita_exp[24] = dados_escrita_expected_prev[24];
	end
	if (
		( dados_escrita_expected_prev[25] !== 1'bx ) && ( dados_escrita_prev[25] !== dados_escrita_expected_prev[25] )
		&& ((dados_escrita_expected_prev[25] !== last_dados_escrita_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dados_escrita[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dados_escrita_expected_prev);
		$display ("     Real value = %b", dados_escrita_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dados_escrita_exp[25] = dados_escrita_expected_prev[25];
	end
	if (
		( dados_escrita_expected_prev[26] !== 1'bx ) && ( dados_escrita_prev[26] !== dados_escrita_expected_prev[26] )
		&& ((dados_escrita_expected_prev[26] !== last_dados_escrita_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dados_escrita[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dados_escrita_expected_prev);
		$display ("     Real value = %b", dados_escrita_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dados_escrita_exp[26] = dados_escrita_expected_prev[26];
	end
	if (
		( dados_escrita_expected_prev[27] !== 1'bx ) && ( dados_escrita_prev[27] !== dados_escrita_expected_prev[27] )
		&& ((dados_escrita_expected_prev[27] !== last_dados_escrita_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dados_escrita[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dados_escrita_expected_prev);
		$display ("     Real value = %b", dados_escrita_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dados_escrita_exp[27] = dados_escrita_expected_prev[27];
	end
	if (
		( dados_escrita_expected_prev[28] !== 1'bx ) && ( dados_escrita_prev[28] !== dados_escrita_expected_prev[28] )
		&& ((dados_escrita_expected_prev[28] !== last_dados_escrita_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dados_escrita[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dados_escrita_expected_prev);
		$display ("     Real value = %b", dados_escrita_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dados_escrita_exp[28] = dados_escrita_expected_prev[28];
	end
	if (
		( dados_escrita_expected_prev[29] !== 1'bx ) && ( dados_escrita_prev[29] !== dados_escrita_expected_prev[29] )
		&& ((dados_escrita_expected_prev[29] !== last_dados_escrita_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dados_escrita[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dados_escrita_expected_prev);
		$display ("     Real value = %b", dados_escrita_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dados_escrita_exp[29] = dados_escrita_expected_prev[29];
	end
	if (
		( dados_escrita_expected_prev[30] !== 1'bx ) && ( dados_escrita_prev[30] !== dados_escrita_expected_prev[30] )
		&& ((dados_escrita_expected_prev[30] !== last_dados_escrita_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dados_escrita[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dados_escrita_expected_prev);
		$display ("     Real value = %b", dados_escrita_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dados_escrita_exp[30] = dados_escrita_expected_prev[30];
	end
	if (
		( dados_escrita_expected_prev[31] !== 1'bx ) && ( dados_escrita_prev[31] !== dados_escrita_expected_prev[31] )
		&& ((dados_escrita_expected_prev[31] !== last_dados_escrita_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dados_escrita[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dados_escrita_expected_prev);
		$display ("     Real value = %b", dados_escrita_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dados_escrita_exp[31] = dados_escrita_expected_prev[31];
	end
	if (
		( end_coluna_expected_prev[0] !== 1'bx ) && ( end_coluna_prev[0] !== end_coluna_expected_prev[0] )
		&& ((end_coluna_expected_prev[0] !== last_end_coluna_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port end_coluna[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", end_coluna_expected_prev);
		$display ("     Real value = %b", end_coluna_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_end_coluna_exp[0] = end_coluna_expected_prev[0];
	end
	if (
		( end_coluna_expected_prev[1] !== 1'bx ) && ( end_coluna_prev[1] !== end_coluna_expected_prev[1] )
		&& ((end_coluna_expected_prev[1] !== last_end_coluna_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port end_coluna[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", end_coluna_expected_prev);
		$display ("     Real value = %b", end_coluna_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_end_coluna_exp[1] = end_coluna_expected_prev[1];
	end
	if (
		( end_coluna_expected_prev[2] !== 1'bx ) && ( end_coluna_prev[2] !== end_coluna_expected_prev[2] )
		&& ((end_coluna_expected_prev[2] !== last_end_coluna_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port end_coluna[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", end_coluna_expected_prev);
		$display ("     Real value = %b", end_coluna_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_end_coluna_exp[2] = end_coluna_expected_prev[2];
	end
	if (
		( end_coluna_expected_prev[3] !== 1'bx ) && ( end_coluna_prev[3] !== end_coluna_expected_prev[3] )
		&& ((end_coluna_expected_prev[3] !== last_end_coluna_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port end_coluna[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", end_coluna_expected_prev);
		$display ("     Real value = %b", end_coluna_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_end_coluna_exp[3] = end_coluna_expected_prev[3];
	end
	if (
		( end_coluna_expected_prev[4] !== 1'bx ) && ( end_coluna_prev[4] !== end_coluna_expected_prev[4] )
		&& ((end_coluna_expected_prev[4] !== last_end_coluna_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port end_coluna[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", end_coluna_expected_prev);
		$display ("     Real value = %b", end_coluna_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_end_coluna_exp[4] = end_coluna_expected_prev[4];
	end
	if (
		( end_coluna_expected_prev[5] !== 1'bx ) && ( end_coluna_prev[5] !== end_coluna_expected_prev[5] )
		&& ((end_coluna_expected_prev[5] !== last_end_coluna_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port end_coluna[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", end_coluna_expected_prev);
		$display ("     Real value = %b", end_coluna_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_end_coluna_exp[5] = end_coluna_expected_prev[5];
	end
	if (
		( end_coluna_expected_prev[6] !== 1'bx ) && ( end_coluna_prev[6] !== end_coluna_expected_prev[6] )
		&& ((end_coluna_expected_prev[6] !== last_end_coluna_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port end_coluna[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", end_coluna_expected_prev);
		$display ("     Real value = %b", end_coluna_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_end_coluna_exp[6] = end_coluna_expected_prev[6];
	end
	if (
		( end_coluna_expected_prev[7] !== 1'bx ) && ( end_coluna_prev[7] !== end_coluna_expected_prev[7] )
		&& ((end_coluna_expected_prev[7] !== last_end_coluna_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port end_coluna[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", end_coluna_expected_prev);
		$display ("     Real value = %b", end_coluna_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_end_coluna_exp[7] = end_coluna_expected_prev[7];
	end
	if (
		( end_coluna_expected_prev[8] !== 1'bx ) && ( end_coluna_prev[8] !== end_coluna_expected_prev[8] )
		&& ((end_coluna_expected_prev[8] !== last_end_coluna_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port end_coluna[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", end_coluna_expected_prev);
		$display ("     Real value = %b", end_coluna_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_end_coluna_exp[8] = end_coluna_expected_prev[8];
	end
	if (
		( end_coluna_expected_prev[9] !== 1'bx ) && ( end_coluna_prev[9] !== end_coluna_expected_prev[9] )
		&& ((end_coluna_expected_prev[9] !== last_end_coluna_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port end_coluna[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", end_coluna_expected_prev);
		$display ("     Real value = %b", end_coluna_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_end_coluna_exp[9] = end_coluna_expected_prev[9];
	end
	if (
		( end_coluna_expected_prev[10] !== 1'bx ) && ( end_coluna_prev[10] !== end_coluna_expected_prev[10] )
		&& ((end_coluna_expected_prev[10] !== last_end_coluna_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port end_coluna[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", end_coluna_expected_prev);
		$display ("     Real value = %b", end_coluna_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_end_coluna_exp[10] = end_coluna_expected_prev[10];
	end
	if (
		( end_linha_expected_prev[0] !== 1'bx ) && ( end_linha_prev[0] !== end_linha_expected_prev[0] )
		&& ((end_linha_expected_prev[0] !== last_end_linha_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port end_linha[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", end_linha_expected_prev);
		$display ("     Real value = %b", end_linha_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_end_linha_exp[0] = end_linha_expected_prev[0];
	end
	if (
		( end_linha_expected_prev[1] !== 1'bx ) && ( end_linha_prev[1] !== end_linha_expected_prev[1] )
		&& ((end_linha_expected_prev[1] !== last_end_linha_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port end_linha[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", end_linha_expected_prev);
		$display ("     Real value = %b", end_linha_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_end_linha_exp[1] = end_linha_expected_prev[1];
	end
	if (
		( end_linha_expected_prev[2] !== 1'bx ) && ( end_linha_prev[2] !== end_linha_expected_prev[2] )
		&& ((end_linha_expected_prev[2] !== last_end_linha_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port end_linha[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", end_linha_expected_prev);
		$display ("     Real value = %b", end_linha_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_end_linha_exp[2] = end_linha_expected_prev[2];
	end
	if (
		( end_linha_expected_prev[3] !== 1'bx ) && ( end_linha_prev[3] !== end_linha_expected_prev[3] )
		&& ((end_linha_expected_prev[3] !== last_end_linha_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port end_linha[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", end_linha_expected_prev);
		$display ("     Real value = %b", end_linha_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_end_linha_exp[3] = end_linha_expected_prev[3];
	end
	if (
		( end_linha_expected_prev[4] !== 1'bx ) && ( end_linha_prev[4] !== end_linha_expected_prev[4] )
		&& ((end_linha_expected_prev[4] !== last_end_linha_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port end_linha[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", end_linha_expected_prev);
		$display ("     Real value = %b", end_linha_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_end_linha_exp[4] = end_linha_expected_prev[4];
	end
	if (
		( end_linha_expected_prev[5] !== 1'bx ) && ( end_linha_prev[5] !== end_linha_expected_prev[5] )
		&& ((end_linha_expected_prev[5] !== last_end_linha_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port end_linha[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", end_linha_expected_prev);
		$display ("     Real value = %b", end_linha_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_end_linha_exp[5] = end_linha_expected_prev[5];
	end
	if (
		( end_linha_expected_prev[6] !== 1'bx ) && ( end_linha_prev[6] !== end_linha_expected_prev[6] )
		&& ((end_linha_expected_prev[6] !== last_end_linha_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port end_linha[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", end_linha_expected_prev);
		$display ("     Real value = %b", end_linha_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_end_linha_exp[6] = end_linha_expected_prev[6];
	end
	if (
		( end_linha_expected_prev[7] !== 1'bx ) && ( end_linha_prev[7] !== end_linha_expected_prev[7] )
		&& ((end_linha_expected_prev[7] !== last_end_linha_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port end_linha[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", end_linha_expected_prev);
		$display ("     Real value = %b", end_linha_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_end_linha_exp[7] = end_linha_expected_prev[7];
	end
	if (
		( end_linha_expected_prev[8] !== 1'bx ) && ( end_linha_prev[8] !== end_linha_expected_prev[8] )
		&& ((end_linha_expected_prev[8] !== last_end_linha_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port end_linha[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", end_linha_expected_prev);
		$display ("     Real value = %b", end_linha_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_end_linha_exp[8] = end_linha_expected_prev[8];
	end
	if (
		( end_linha_expected_prev[9] !== 1'bx ) && ( end_linha_prev[9] !== end_linha_expected_prev[9] )
		&& ((end_linha_expected_prev[9] !== last_end_linha_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port end_linha[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", end_linha_expected_prev);
		$display ("     Real value = %b", end_linha_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_end_linha_exp[9] = end_linha_expected_prev[9];
	end
	if (
		( end_linha_expected_prev[10] !== 1'bx ) && ( end_linha_prev[10] !== end_linha_expected_prev[10] )
		&& ((end_linha_expected_prev[10] !== last_end_linha_exp[10]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port end_linha[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", end_linha_expected_prev);
		$display ("     Real value = %b", end_linha_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_end_linha_exp[10] = end_linha_expected_prev[10];
	end
	if (
		( out_expected_prev[0] !== 1'bx ) && ( out_prev[0] !== out_expected_prev[0] )
		&& ((out_expected_prev[0] !== last_out_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_out_exp[0] = out_expected_prev[0];
	end
	if (
		( out_expected_prev[1] !== 1'bx ) && ( out_prev[1] !== out_expected_prev[1] )
		&& ((out_expected_prev[1] !== last_out_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_out_exp[1] = out_expected_prev[1];
	end
	if (
		( out_expected_prev[2] !== 1'bx ) && ( out_prev[2] !== out_expected_prev[2] )
		&& ((out_expected_prev[2] !== last_out_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_out_exp[2] = out_expected_prev[2];
	end
	if (
		( out_expected_prev[3] !== 1'bx ) && ( out_prev[3] !== out_expected_prev[3] )
		&& ((out_expected_prev[3] !== last_out_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_out_exp[3] = out_expected_prev[3];
	end
	if (
		( out_expected_prev[4] !== 1'bx ) && ( out_prev[4] !== out_expected_prev[4] )
		&& ((out_expected_prev[4] !== last_out_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_out_exp[4] = out_expected_prev[4];
	end
	if (
		( out_expected_prev[5] !== 1'bx ) && ( out_prev[5] !== out_expected_prev[5] )
		&& ((out_expected_prev[5] !== last_out_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_out_exp[5] = out_expected_prev[5];
	end
	if (
		( out_expected_prev[6] !== 1'bx ) && ( out_prev[6] !== out_expected_prev[6] )
		&& ((out_expected_prev[6] !== last_out_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_out_exp[6] = out_expected_prev[6];
	end
	if (
		( out_expected_prev[7] !== 1'bx ) && ( out_prev[7] !== out_expected_prev[7] )
		&& ((out_expected_prev[7] !== last_out_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_out_exp[7] = out_expected_prev[7];
	end
	if (
		( out_expected_prev[8] !== 1'bx ) && ( out_prev[8] !== out_expected_prev[8] )
		&& ((out_expected_prev[8] !== last_out_exp[8]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_out_exp[8] = out_expected_prev[8];
	end
	if (
		( out_expected_prev[9] !== 1'bx ) && ( out_prev[9] !== out_expected_prev[9] )
		&& ((out_expected_prev[9] !== last_out_exp[9]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_out_exp[9] = out_expected_prev[9];
	end
	if (
		( out_expected_prev[10] !== 1'bx ) && ( out_prev[10] !== out_expected_prev[10] )
		&& ((out_expected_prev[10] !== last_out_exp[10]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_out_exp[10] = out_expected_prev[10];
	end
	if (
		( out_expected_prev[11] !== 1'bx ) && ( out_prev[11] !== out_expected_prev[11] )
		&& ((out_expected_prev[11] !== last_out_exp[11]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_out_exp[11] = out_expected_prev[11];
	end
	if (
		( out_expected_prev[12] !== 1'bx ) && ( out_prev[12] !== out_expected_prev[12] )
		&& ((out_expected_prev[12] !== last_out_exp[12]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_out_exp[12] = out_expected_prev[12];
	end
	if (
		( out_expected_prev[13] !== 1'bx ) && ( out_prev[13] !== out_expected_prev[13] )
		&& ((out_expected_prev[13] !== last_out_exp[13]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_out_exp[13] = out_expected_prev[13];
	end
	if (
		( out_expected_prev[14] !== 1'bx ) && ( out_prev[14] !== out_expected_prev[14] )
		&& ((out_expected_prev[14] !== last_out_exp[14]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_out_exp[14] = out_expected_prev[14];
	end
	if (
		( out_expected_prev[15] !== 1'bx ) && ( out_prev[15] !== out_expected_prev[15] )
		&& ((out_expected_prev[15] !== last_out_exp[15]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_out_exp[15] = out_expected_prev[15];
	end
	if (
		( out_expected_prev[16] !== 1'bx ) && ( out_prev[16] !== out_expected_prev[16] )
		&& ((out_expected_prev[16] !== last_out_exp[16]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_out_exp[16] = out_expected_prev[16];
	end
	if (
		( out_expected_prev[17] !== 1'bx ) && ( out_prev[17] !== out_expected_prev[17] )
		&& ((out_expected_prev[17] !== last_out_exp[17]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_out_exp[17] = out_expected_prev[17];
	end
	if (
		( out_expected_prev[18] !== 1'bx ) && ( out_prev[18] !== out_expected_prev[18] )
		&& ((out_expected_prev[18] !== last_out_exp[18]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_out_exp[18] = out_expected_prev[18];
	end
	if (
		( out_expected_prev[19] !== 1'bx ) && ( out_prev[19] !== out_expected_prev[19] )
		&& ((out_expected_prev[19] !== last_out_exp[19]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_out_exp[19] = out_expected_prev[19];
	end
	if (
		( out_expected_prev[20] !== 1'bx ) && ( out_prev[20] !== out_expected_prev[20] )
		&& ((out_expected_prev[20] !== last_out_exp[20]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_out_exp[20] = out_expected_prev[20];
	end
	if (
		( out_expected_prev[21] !== 1'bx ) && ( out_prev[21] !== out_expected_prev[21] )
		&& ((out_expected_prev[21] !== last_out_exp[21]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_out_exp[21] = out_expected_prev[21];
	end
	if (
		( out_expected_prev[22] !== 1'bx ) && ( out_prev[22] !== out_expected_prev[22] )
		&& ((out_expected_prev[22] !== last_out_exp[22]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_out_exp[22] = out_expected_prev[22];
	end
	if (
		( out_expected_prev[23] !== 1'bx ) && ( out_prev[23] !== out_expected_prev[23] )
		&& ((out_expected_prev[23] !== last_out_exp[23]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_out_exp[23] = out_expected_prev[23];
	end
	if (
		( out_expected_prev[24] !== 1'bx ) && ( out_prev[24] !== out_expected_prev[24] )
		&& ((out_expected_prev[24] !== last_out_exp[24]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_out_exp[24] = out_expected_prev[24];
	end
	if (
		( out_expected_prev[25] !== 1'bx ) && ( out_prev[25] !== out_expected_prev[25] )
		&& ((out_expected_prev[25] !== last_out_exp[25]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_out_exp[25] = out_expected_prev[25];
	end
	if (
		( out_expected_prev[26] !== 1'bx ) && ( out_prev[26] !== out_expected_prev[26] )
		&& ((out_expected_prev[26] !== last_out_exp[26]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_out_exp[26] = out_expected_prev[26];
	end
	if (
		( out_expected_prev[27] !== 1'bx ) && ( out_prev[27] !== out_expected_prev[27] )
		&& ((out_expected_prev[27] !== last_out_exp[27]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_out_exp[27] = out_expected_prev[27];
	end
	if (
		( out_expected_prev[28] !== 1'bx ) && ( out_prev[28] !== out_expected_prev[28] )
		&& ((out_expected_prev[28] !== last_out_exp[28]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_out_exp[28] = out_expected_prev[28];
	end
	if (
		( out_expected_prev[29] !== 1'bx ) && ( out_prev[29] !== out_expected_prev[29] )
		&& ((out_expected_prev[29] !== last_out_exp[29]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_out_exp[29] = out_expected_prev[29];
	end
	if (
		( out_expected_prev[30] !== 1'bx ) && ( out_prev[30] !== out_expected_prev[30] )
		&& ((out_expected_prev[30] !== last_out_exp[30]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_out_exp[30] = out_expected_prev[30];
	end
	if (
		( out_expected_prev[31] !== 1'bx ) && ( out_prev[31] !== out_expected_prev[31] )
		&& ((out_expected_prev[31] !== last_out_exp[31]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_out_exp[31] = out_expected_prev[31];
	end
	if (
		( PCflag_expected_prev[0] !== 1'bx ) && ( PCflag_prev[0] !== PCflag_expected_prev[0] )
		&& ((PCflag_expected_prev[0] !== last_PCflag_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCflag[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCflag_expected_prev);
		$display ("     Real value = %b", PCflag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_PCflag_exp[0] = PCflag_expected_prev[0];
	end
	if (
		( PCflag_expected_prev[1] !== 1'bx ) && ( PCflag_prev[1] !== PCflag_expected_prev[1] )
		&& ((PCflag_expected_prev[1] !== last_PCflag_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCflag[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCflag_expected_prev);
		$display ("     Real value = %b", PCflag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_PCflag_exp[1] = PCflag_expected_prev[1];
	end
	if (
		( saida_expected_prev[0] !== 1'bx ) && ( saida_prev[0] !== saida_expected_prev[0] )
		&& ((saida_expected_prev[0] !== last_saida_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_saida_exp[0] = saida_expected_prev[0];
	end
	if (
		( saida_expected_prev[1] !== 1'bx ) && ( saida_prev[1] !== saida_expected_prev[1] )
		&& ((saida_expected_prev[1] !== last_saida_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_saida_exp[1] = saida_expected_prev[1];
	end
	if (
		( saida_expected_prev[2] !== 1'bx ) && ( saida_prev[2] !== saida_expected_prev[2] )
		&& ((saida_expected_prev[2] !== last_saida_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_saida_exp[2] = saida_expected_prev[2];
	end
	if (
		( saida_expected_prev[3] !== 1'bx ) && ( saida_prev[3] !== saida_expected_prev[3] )
		&& ((saida_expected_prev[3] !== last_saida_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_saida_exp[3] = saida_expected_prev[3];
	end
	if (
		( saida_expected_prev[4] !== 1'bx ) && ( saida_prev[4] !== saida_expected_prev[4] )
		&& ((saida_expected_prev[4] !== last_saida_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_saida_exp[4] = saida_expected_prev[4];
	end
	if (
		( saida_expected_prev[5] !== 1'bx ) && ( saida_prev[5] !== saida_expected_prev[5] )
		&& ((saida_expected_prev[5] !== last_saida_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_saida_exp[5] = saida_expected_prev[5];
	end
	if (
		( saida_expected_prev[6] !== 1'bx ) && ( saida_prev[6] !== saida_expected_prev[6] )
		&& ((saida_expected_prev[6] !== last_saida_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_saida_exp[6] = saida_expected_prev[6];
	end
	if (
		( saida_expected_prev[7] !== 1'bx ) && ( saida_prev[7] !== saida_expected_prev[7] )
		&& ((saida_expected_prev[7] !== last_saida_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_saida_exp[7] = saida_expected_prev[7];
	end
	if (
		( saida_expected_prev[8] !== 1'bx ) && ( saida_prev[8] !== saida_expected_prev[8] )
		&& ((saida_expected_prev[8] !== last_saida_exp[8]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_saida_exp[8] = saida_expected_prev[8];
	end
	if (
		( saida_expected_prev[9] !== 1'bx ) && ( saida_prev[9] !== saida_expected_prev[9] )
		&& ((saida_expected_prev[9] !== last_saida_exp[9]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_saida_exp[9] = saida_expected_prev[9];
	end
	if (
		( saida_expected_prev[10] !== 1'bx ) && ( saida_prev[10] !== saida_expected_prev[10] )
		&& ((saida_expected_prev[10] !== last_saida_exp[10]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_saida_exp[10] = saida_expected_prev[10];
	end
	if (
		( saida_expected_prev[11] !== 1'bx ) && ( saida_prev[11] !== saida_expected_prev[11] )
		&& ((saida_expected_prev[11] !== last_saida_exp[11]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_saida_exp[11] = saida_expected_prev[11];
	end
	if (
		( saida_expected_prev[12] !== 1'bx ) && ( saida_prev[12] !== saida_expected_prev[12] )
		&& ((saida_expected_prev[12] !== last_saida_exp[12]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_saida_exp[12] = saida_expected_prev[12];
	end
	if (
		( saida_expected_prev[13] !== 1'bx ) && ( saida_prev[13] !== saida_expected_prev[13] )
		&& ((saida_expected_prev[13] !== last_saida_exp[13]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_saida_exp[13] = saida_expected_prev[13];
	end
	if (
		( saida_expected_prev[14] !== 1'bx ) && ( saida_prev[14] !== saida_expected_prev[14] )
		&& ((saida_expected_prev[14] !== last_saida_exp[14]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_saida_exp[14] = saida_expected_prev[14];
	end
	if (
		( saida_expected_prev[15] !== 1'bx ) && ( saida_prev[15] !== saida_expected_prev[15] )
		&& ((saida_expected_prev[15] !== last_saida_exp[15]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_saida_exp[15] = saida_expected_prev[15];
	end
	if (
		( saida_expected_prev[16] !== 1'bx ) && ( saida_prev[16] !== saida_expected_prev[16] )
		&& ((saida_expected_prev[16] !== last_saida_exp[16]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_saida_exp[16] = saida_expected_prev[16];
	end
	if (
		( saida_expected_prev[17] !== 1'bx ) && ( saida_prev[17] !== saida_expected_prev[17] )
		&& ((saida_expected_prev[17] !== last_saida_exp[17]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_saida_exp[17] = saida_expected_prev[17];
	end
	if (
		( saida_expected_prev[18] !== 1'bx ) && ( saida_prev[18] !== saida_expected_prev[18] )
		&& ((saida_expected_prev[18] !== last_saida_exp[18]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_saida_exp[18] = saida_expected_prev[18];
	end
	if (
		( saida_expected_prev[19] !== 1'bx ) && ( saida_prev[19] !== saida_expected_prev[19] )
		&& ((saida_expected_prev[19] !== last_saida_exp[19]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_saida_exp[19] = saida_expected_prev[19];
	end
	if (
		( saida_expected_prev[20] !== 1'bx ) && ( saida_prev[20] !== saida_expected_prev[20] )
		&& ((saida_expected_prev[20] !== last_saida_exp[20]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_saida_exp[20] = saida_expected_prev[20];
	end
	if (
		( saida_expected_prev[21] !== 1'bx ) && ( saida_prev[21] !== saida_expected_prev[21] )
		&& ((saida_expected_prev[21] !== last_saida_exp[21]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_saida_exp[21] = saida_expected_prev[21];
	end
	if (
		( saida_expected_prev[22] !== 1'bx ) && ( saida_prev[22] !== saida_expected_prev[22] )
		&& ((saida_expected_prev[22] !== last_saida_exp[22]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_saida_exp[22] = saida_expected_prev[22];
	end
	if (
		( saida_expected_prev[23] !== 1'bx ) && ( saida_prev[23] !== saida_expected_prev[23] )
		&& ((saida_expected_prev[23] !== last_saida_exp[23]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_saida_exp[23] = saida_expected_prev[23];
	end
	if (
		( saida_expected_prev[24] !== 1'bx ) && ( saida_prev[24] !== saida_expected_prev[24] )
		&& ((saida_expected_prev[24] !== last_saida_exp[24]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_saida_exp[24] = saida_expected_prev[24];
	end
	if (
		( saida_expected_prev[25] !== 1'bx ) && ( saida_prev[25] !== saida_expected_prev[25] )
		&& ((saida_expected_prev[25] !== last_saida_exp[25]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_saida_exp[25] = saida_expected_prev[25];
	end
	if (
		( saida_expected_prev[26] !== 1'bx ) && ( saida_prev[26] !== saida_expected_prev[26] )
		&& ((saida_expected_prev[26] !== last_saida_exp[26]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_saida_exp[26] = saida_expected_prev[26];
	end
	if (
		( saida_expected_prev[27] !== 1'bx ) && ( saida_prev[27] !== saida_expected_prev[27] )
		&& ((saida_expected_prev[27] !== last_saida_exp[27]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_saida_exp[27] = saida_expected_prev[27];
	end
	if (
		( saida_expected_prev[28] !== 1'bx ) && ( saida_prev[28] !== saida_expected_prev[28] )
		&& ((saida_expected_prev[28] !== last_saida_exp[28]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_saida_exp[28] = saida_expected_prev[28];
	end
	if (
		( saida_expected_prev[29] !== 1'bx ) && ( saida_prev[29] !== saida_expected_prev[29] )
		&& ((saida_expected_prev[29] !== last_saida_exp[29]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_saida_exp[29] = saida_expected_prev[29];
	end
	if (
		( saida_expected_prev[30] !== 1'bx ) && ( saida_prev[30] !== saida_expected_prev[30] )
		&& ((saida_expected_prev[30] !== last_saida_exp[30]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_saida_exp[30] = saida_expected_prev[30];
	end
	if (
		( saida_expected_prev[31] !== 1'bx ) && ( saida_prev[31] !== saida_expected_prev[31] )
		&& ((saida_expected_prev[31] !== last_saida_exp[31]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_saida_exp[31] = saida_expected_prev[31];
	end
	if (
		( saidaRAMdados_expected_prev[0] !== 1'bx ) && ( saidaRAMdados_prev[0] !== saidaRAMdados_expected_prev[0] )
		&& ((saidaRAMdados_expected_prev[0] !== last_saidaRAMdados_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaRAMdados[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaRAMdados_expected_prev);
		$display ("     Real value = %b", saidaRAMdados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_saidaRAMdados_exp[0] = saidaRAMdados_expected_prev[0];
	end
	if (
		( saidaRAMdados_expected_prev[1] !== 1'bx ) && ( saidaRAMdados_prev[1] !== saidaRAMdados_expected_prev[1] )
		&& ((saidaRAMdados_expected_prev[1] !== last_saidaRAMdados_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaRAMdados[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaRAMdados_expected_prev);
		$display ("     Real value = %b", saidaRAMdados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_saidaRAMdados_exp[1] = saidaRAMdados_expected_prev[1];
	end
	if (
		( saidaRAMdados_expected_prev[2] !== 1'bx ) && ( saidaRAMdados_prev[2] !== saidaRAMdados_expected_prev[2] )
		&& ((saidaRAMdados_expected_prev[2] !== last_saidaRAMdados_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaRAMdados[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaRAMdados_expected_prev);
		$display ("     Real value = %b", saidaRAMdados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_saidaRAMdados_exp[2] = saidaRAMdados_expected_prev[2];
	end
	if (
		( saidaRAMdados_expected_prev[3] !== 1'bx ) && ( saidaRAMdados_prev[3] !== saidaRAMdados_expected_prev[3] )
		&& ((saidaRAMdados_expected_prev[3] !== last_saidaRAMdados_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaRAMdados[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaRAMdados_expected_prev);
		$display ("     Real value = %b", saidaRAMdados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_saidaRAMdados_exp[3] = saidaRAMdados_expected_prev[3];
	end
	if (
		( saidaRAMdados_expected_prev[4] !== 1'bx ) && ( saidaRAMdados_prev[4] !== saidaRAMdados_expected_prev[4] )
		&& ((saidaRAMdados_expected_prev[4] !== last_saidaRAMdados_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaRAMdados[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaRAMdados_expected_prev);
		$display ("     Real value = %b", saidaRAMdados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_saidaRAMdados_exp[4] = saidaRAMdados_expected_prev[4];
	end
	if (
		( saidaRAMdados_expected_prev[5] !== 1'bx ) && ( saidaRAMdados_prev[5] !== saidaRAMdados_expected_prev[5] )
		&& ((saidaRAMdados_expected_prev[5] !== last_saidaRAMdados_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaRAMdados[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaRAMdados_expected_prev);
		$display ("     Real value = %b", saidaRAMdados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_saidaRAMdados_exp[5] = saidaRAMdados_expected_prev[5];
	end
	if (
		( saidaRAMdados_expected_prev[6] !== 1'bx ) && ( saidaRAMdados_prev[6] !== saidaRAMdados_expected_prev[6] )
		&& ((saidaRAMdados_expected_prev[6] !== last_saidaRAMdados_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaRAMdados[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaRAMdados_expected_prev);
		$display ("     Real value = %b", saidaRAMdados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_saidaRAMdados_exp[6] = saidaRAMdados_expected_prev[6];
	end
	if (
		( saidaRAMdados_expected_prev[7] !== 1'bx ) && ( saidaRAMdados_prev[7] !== saidaRAMdados_expected_prev[7] )
		&& ((saidaRAMdados_expected_prev[7] !== last_saidaRAMdados_exp[7]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaRAMdados[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaRAMdados_expected_prev);
		$display ("     Real value = %b", saidaRAMdados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_saidaRAMdados_exp[7] = saidaRAMdados_expected_prev[7];
	end
	if (
		( saidaRAMdados_expected_prev[8] !== 1'bx ) && ( saidaRAMdados_prev[8] !== saidaRAMdados_expected_prev[8] )
		&& ((saidaRAMdados_expected_prev[8] !== last_saidaRAMdados_exp[8]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaRAMdados[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaRAMdados_expected_prev);
		$display ("     Real value = %b", saidaRAMdados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_saidaRAMdados_exp[8] = saidaRAMdados_expected_prev[8];
	end
	if (
		( saidaRAMdados_expected_prev[9] !== 1'bx ) && ( saidaRAMdados_prev[9] !== saidaRAMdados_expected_prev[9] )
		&& ((saidaRAMdados_expected_prev[9] !== last_saidaRAMdados_exp[9]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaRAMdados[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaRAMdados_expected_prev);
		$display ("     Real value = %b", saidaRAMdados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_saidaRAMdados_exp[9] = saidaRAMdados_expected_prev[9];
	end
	if (
		( saidaRAMdados_expected_prev[10] !== 1'bx ) && ( saidaRAMdados_prev[10] !== saidaRAMdados_expected_prev[10] )
		&& ((saidaRAMdados_expected_prev[10] !== last_saidaRAMdados_exp[10]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaRAMdados[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaRAMdados_expected_prev);
		$display ("     Real value = %b", saidaRAMdados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_saidaRAMdados_exp[10] = saidaRAMdados_expected_prev[10];
	end
	if (
		( saidaRAMdados_expected_prev[11] !== 1'bx ) && ( saidaRAMdados_prev[11] !== saidaRAMdados_expected_prev[11] )
		&& ((saidaRAMdados_expected_prev[11] !== last_saidaRAMdados_exp[11]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaRAMdados[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaRAMdados_expected_prev);
		$display ("     Real value = %b", saidaRAMdados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_saidaRAMdados_exp[11] = saidaRAMdados_expected_prev[11];
	end
	if (
		( saidaRAMdados_expected_prev[12] !== 1'bx ) && ( saidaRAMdados_prev[12] !== saidaRAMdados_expected_prev[12] )
		&& ((saidaRAMdados_expected_prev[12] !== last_saidaRAMdados_exp[12]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaRAMdados[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaRAMdados_expected_prev);
		$display ("     Real value = %b", saidaRAMdados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_saidaRAMdados_exp[12] = saidaRAMdados_expected_prev[12];
	end
	if (
		( saidaRAMdados_expected_prev[13] !== 1'bx ) && ( saidaRAMdados_prev[13] !== saidaRAMdados_expected_prev[13] )
		&& ((saidaRAMdados_expected_prev[13] !== last_saidaRAMdados_exp[13]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaRAMdados[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaRAMdados_expected_prev);
		$display ("     Real value = %b", saidaRAMdados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_saidaRAMdados_exp[13] = saidaRAMdados_expected_prev[13];
	end
	if (
		( saidaRAMdados_expected_prev[14] !== 1'bx ) && ( saidaRAMdados_prev[14] !== saidaRAMdados_expected_prev[14] )
		&& ((saidaRAMdados_expected_prev[14] !== last_saidaRAMdados_exp[14]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaRAMdados[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaRAMdados_expected_prev);
		$display ("     Real value = %b", saidaRAMdados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_saidaRAMdados_exp[14] = saidaRAMdados_expected_prev[14];
	end
	if (
		( saidaRAMdados_expected_prev[15] !== 1'bx ) && ( saidaRAMdados_prev[15] !== saidaRAMdados_expected_prev[15] )
		&& ((saidaRAMdados_expected_prev[15] !== last_saidaRAMdados_exp[15]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaRAMdados[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaRAMdados_expected_prev);
		$display ("     Real value = %b", saidaRAMdados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_saidaRAMdados_exp[15] = saidaRAMdados_expected_prev[15];
	end
	if (
		( saidaRAMdados_expected_prev[16] !== 1'bx ) && ( saidaRAMdados_prev[16] !== saidaRAMdados_expected_prev[16] )
		&& ((saidaRAMdados_expected_prev[16] !== last_saidaRAMdados_exp[16]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaRAMdados[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaRAMdados_expected_prev);
		$display ("     Real value = %b", saidaRAMdados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_saidaRAMdados_exp[16] = saidaRAMdados_expected_prev[16];
	end
	if (
		( saidaRAMdados_expected_prev[17] !== 1'bx ) && ( saidaRAMdados_prev[17] !== saidaRAMdados_expected_prev[17] )
		&& ((saidaRAMdados_expected_prev[17] !== last_saidaRAMdados_exp[17]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaRAMdados[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaRAMdados_expected_prev);
		$display ("     Real value = %b", saidaRAMdados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_saidaRAMdados_exp[17] = saidaRAMdados_expected_prev[17];
	end
	if (
		( saidaRAMdados_expected_prev[18] !== 1'bx ) && ( saidaRAMdados_prev[18] !== saidaRAMdados_expected_prev[18] )
		&& ((saidaRAMdados_expected_prev[18] !== last_saidaRAMdados_exp[18]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaRAMdados[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaRAMdados_expected_prev);
		$display ("     Real value = %b", saidaRAMdados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_saidaRAMdados_exp[18] = saidaRAMdados_expected_prev[18];
	end
	if (
		( saidaRAMdados_expected_prev[19] !== 1'bx ) && ( saidaRAMdados_prev[19] !== saidaRAMdados_expected_prev[19] )
		&& ((saidaRAMdados_expected_prev[19] !== last_saidaRAMdados_exp[19]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaRAMdados[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaRAMdados_expected_prev);
		$display ("     Real value = %b", saidaRAMdados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_saidaRAMdados_exp[19] = saidaRAMdados_expected_prev[19];
	end
	if (
		( saidaRAMdados_expected_prev[20] !== 1'bx ) && ( saidaRAMdados_prev[20] !== saidaRAMdados_expected_prev[20] )
		&& ((saidaRAMdados_expected_prev[20] !== last_saidaRAMdados_exp[20]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaRAMdados[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaRAMdados_expected_prev);
		$display ("     Real value = %b", saidaRAMdados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_saidaRAMdados_exp[20] = saidaRAMdados_expected_prev[20];
	end
	if (
		( saidaRAMdados_expected_prev[21] !== 1'bx ) && ( saidaRAMdados_prev[21] !== saidaRAMdados_expected_prev[21] )
		&& ((saidaRAMdados_expected_prev[21] !== last_saidaRAMdados_exp[21]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaRAMdados[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaRAMdados_expected_prev);
		$display ("     Real value = %b", saidaRAMdados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_saidaRAMdados_exp[21] = saidaRAMdados_expected_prev[21];
	end
	if (
		( saidaRAMdados_expected_prev[22] !== 1'bx ) && ( saidaRAMdados_prev[22] !== saidaRAMdados_expected_prev[22] )
		&& ((saidaRAMdados_expected_prev[22] !== last_saidaRAMdados_exp[22]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaRAMdados[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaRAMdados_expected_prev);
		$display ("     Real value = %b", saidaRAMdados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_saidaRAMdados_exp[22] = saidaRAMdados_expected_prev[22];
	end
	if (
		( saidaRAMdados_expected_prev[23] !== 1'bx ) && ( saidaRAMdados_prev[23] !== saidaRAMdados_expected_prev[23] )
		&& ((saidaRAMdados_expected_prev[23] !== last_saidaRAMdados_exp[23]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaRAMdados[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaRAMdados_expected_prev);
		$display ("     Real value = %b", saidaRAMdados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_saidaRAMdados_exp[23] = saidaRAMdados_expected_prev[23];
	end
	if (
		( saidaRAMdados_expected_prev[24] !== 1'bx ) && ( saidaRAMdados_prev[24] !== saidaRAMdados_expected_prev[24] )
		&& ((saidaRAMdados_expected_prev[24] !== last_saidaRAMdados_exp[24]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaRAMdados[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaRAMdados_expected_prev);
		$display ("     Real value = %b", saidaRAMdados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_saidaRAMdados_exp[24] = saidaRAMdados_expected_prev[24];
	end
	if (
		( saidaRAMdados_expected_prev[25] !== 1'bx ) && ( saidaRAMdados_prev[25] !== saidaRAMdados_expected_prev[25] )
		&& ((saidaRAMdados_expected_prev[25] !== last_saidaRAMdados_exp[25]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaRAMdados[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaRAMdados_expected_prev);
		$display ("     Real value = %b", saidaRAMdados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_saidaRAMdados_exp[25] = saidaRAMdados_expected_prev[25];
	end
	if (
		( saidaRAMdados_expected_prev[26] !== 1'bx ) && ( saidaRAMdados_prev[26] !== saidaRAMdados_expected_prev[26] )
		&& ((saidaRAMdados_expected_prev[26] !== last_saidaRAMdados_exp[26]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaRAMdados[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaRAMdados_expected_prev);
		$display ("     Real value = %b", saidaRAMdados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_saidaRAMdados_exp[26] = saidaRAMdados_expected_prev[26];
	end
	if (
		( saidaRAMdados_expected_prev[27] !== 1'bx ) && ( saidaRAMdados_prev[27] !== saidaRAMdados_expected_prev[27] )
		&& ((saidaRAMdados_expected_prev[27] !== last_saidaRAMdados_exp[27]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaRAMdados[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaRAMdados_expected_prev);
		$display ("     Real value = %b", saidaRAMdados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_saidaRAMdados_exp[27] = saidaRAMdados_expected_prev[27];
	end
	if (
		( saidaRAMdados_expected_prev[28] !== 1'bx ) && ( saidaRAMdados_prev[28] !== saidaRAMdados_expected_prev[28] )
		&& ((saidaRAMdados_expected_prev[28] !== last_saidaRAMdados_exp[28]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaRAMdados[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaRAMdados_expected_prev);
		$display ("     Real value = %b", saidaRAMdados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_saidaRAMdados_exp[28] = saidaRAMdados_expected_prev[28];
	end
	if (
		( saidaRAMdados_expected_prev[29] !== 1'bx ) && ( saidaRAMdados_prev[29] !== saidaRAMdados_expected_prev[29] )
		&& ((saidaRAMdados_expected_prev[29] !== last_saidaRAMdados_exp[29]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaRAMdados[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaRAMdados_expected_prev);
		$display ("     Real value = %b", saidaRAMdados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_saidaRAMdados_exp[29] = saidaRAMdados_expected_prev[29];
	end
	if (
		( saidaRAMdados_expected_prev[30] !== 1'bx ) && ( saidaRAMdados_prev[30] !== saidaRAMdados_expected_prev[30] )
		&& ((saidaRAMdados_expected_prev[30] !== last_saidaRAMdados_exp[30]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaRAMdados[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaRAMdados_expected_prev);
		$display ("     Real value = %b", saidaRAMdados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_saidaRAMdados_exp[30] = saidaRAMdados_expected_prev[30];
	end
	if (
		( saidaRAMdados_expected_prev[31] !== 1'bx ) && ( saidaRAMdados_prev[31] !== saidaRAMdados_expected_prev[31] )
		&& ((saidaRAMdados_expected_prev[31] !== last_saidaRAMdados_exp[31]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaRAMdados[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaRAMdados_expected_prev);
		$display ("     Real value = %b", saidaRAMdados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_saidaRAMdados_exp[31] = saidaRAMdados_expected_prev[31];
	end
	if (
		( store_expected_prev[0] !== 1'bx ) && ( store_prev[0] !== store_expected_prev[0] )
		&& ((store_expected_prev[0] !== last_store_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port store[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", store_expected_prev);
		$display ("     Real value = %b", store_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_store_exp[0] = store_expected_prev[0];
	end
	if (
		( store_expected_prev[1] !== 1'bx ) && ( store_prev[1] !== store_expected_prev[1] )
		&& ((store_expected_prev[1] !== last_store_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port store[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", store_expected_prev);
		$display ("     Real value = %b", store_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_store_exp[1] = store_expected_prev[1];
	end
	if (
		( store_expected_prev[2] !== 1'bx ) && ( store_prev[2] !== store_expected_prev[2] )
		&& ((store_expected_prev[2] !== last_store_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port store[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", store_expected_prev);
		$display ("     Real value = %b", store_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_store_exp[2] = store_expected_prev[2];
	end
	if (
		( store_expected_prev[3] !== 1'bx ) && ( store_prev[3] !== store_expected_prev[3] )
		&& ((store_expected_prev[3] !== last_store_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port store[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", store_expected_prev);
		$display ("     Real value = %b", store_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_store_exp[3] = store_expected_prev[3];
	end
	if (
		( store_expected_prev[4] !== 1'bx ) && ( store_prev[4] !== store_expected_prev[4] )
		&& ((store_expected_prev[4] !== last_store_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port store[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", store_expected_prev);
		$display ("     Real value = %b", store_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_store_exp[4] = store_expected_prev[4];
	end
	if (
		( store_expected_prev[5] !== 1'bx ) && ( store_prev[5] !== store_expected_prev[5] )
		&& ((store_expected_prev[5] !== last_store_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port store[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", store_expected_prev);
		$display ("     Real value = %b", store_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_store_exp[5] = store_expected_prev[5];
	end
	if (
		( store_expected_prev[6] !== 1'bx ) && ( store_prev[6] !== store_expected_prev[6] )
		&& ((store_expected_prev[6] !== last_store_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port store[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", store_expected_prev);
		$display ("     Real value = %b", store_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_store_exp[6] = store_expected_prev[6];
	end
	if (
		( store_expected_prev[7] !== 1'bx ) && ( store_prev[7] !== store_expected_prev[7] )
		&& ((store_expected_prev[7] !== last_store_exp[7]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port store[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", store_expected_prev);
		$display ("     Real value = %b", store_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_store_exp[7] = store_expected_prev[7];
	end
	if (
		( store_expected_prev[8] !== 1'bx ) && ( store_prev[8] !== store_expected_prev[8] )
		&& ((store_expected_prev[8] !== last_store_exp[8]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port store[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", store_expected_prev);
		$display ("     Real value = %b", store_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_store_exp[8] = store_expected_prev[8];
	end
	if (
		( store_expected_prev[9] !== 1'bx ) && ( store_prev[9] !== store_expected_prev[9] )
		&& ((store_expected_prev[9] !== last_store_exp[9]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port store[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", store_expected_prev);
		$display ("     Real value = %b", store_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_store_exp[9] = store_expected_prev[9];
	end
	if (
		( store_expected_prev[10] !== 1'bx ) && ( store_prev[10] !== store_expected_prev[10] )
		&& ((store_expected_prev[10] !== last_store_exp[10]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port store[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", store_expected_prev);
		$display ("     Real value = %b", store_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_store_exp[10] = store_expected_prev[10];
	end
	if (
		( store_expected_prev[11] !== 1'bx ) && ( store_prev[11] !== store_expected_prev[11] )
		&& ((store_expected_prev[11] !== last_store_exp[11]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port store[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", store_expected_prev);
		$display ("     Real value = %b", store_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_store_exp[11] = store_expected_prev[11];
	end
	if (
		( store_expected_prev[12] !== 1'bx ) && ( store_prev[12] !== store_expected_prev[12] )
		&& ((store_expected_prev[12] !== last_store_exp[12]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port store[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", store_expected_prev);
		$display ("     Real value = %b", store_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_store_exp[12] = store_expected_prev[12];
	end
	if (
		( store_expected_prev[13] !== 1'bx ) && ( store_prev[13] !== store_expected_prev[13] )
		&& ((store_expected_prev[13] !== last_store_exp[13]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port store[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", store_expected_prev);
		$display ("     Real value = %b", store_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_store_exp[13] = store_expected_prev[13];
	end
	if (
		( store_expected_prev[14] !== 1'bx ) && ( store_prev[14] !== store_expected_prev[14] )
		&& ((store_expected_prev[14] !== last_store_exp[14]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port store[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", store_expected_prev);
		$display ("     Real value = %b", store_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_store_exp[14] = store_expected_prev[14];
	end
	if (
		( store_expected_prev[15] !== 1'bx ) && ( store_prev[15] !== store_expected_prev[15] )
		&& ((store_expected_prev[15] !== last_store_exp[15]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port store[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", store_expected_prev);
		$display ("     Real value = %b", store_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_store_exp[15] = store_expected_prev[15];
	end
	if (
		( store_expected_prev[16] !== 1'bx ) && ( store_prev[16] !== store_expected_prev[16] )
		&& ((store_expected_prev[16] !== last_store_exp[16]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port store[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", store_expected_prev);
		$display ("     Real value = %b", store_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_store_exp[16] = store_expected_prev[16];
	end
	if (
		( store_expected_prev[17] !== 1'bx ) && ( store_prev[17] !== store_expected_prev[17] )
		&& ((store_expected_prev[17] !== last_store_exp[17]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port store[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", store_expected_prev);
		$display ("     Real value = %b", store_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_store_exp[17] = store_expected_prev[17];
	end
	if (
		( store_expected_prev[18] !== 1'bx ) && ( store_prev[18] !== store_expected_prev[18] )
		&& ((store_expected_prev[18] !== last_store_exp[18]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port store[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", store_expected_prev);
		$display ("     Real value = %b", store_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_store_exp[18] = store_expected_prev[18];
	end
	if (
		( store_expected_prev[19] !== 1'bx ) && ( store_prev[19] !== store_expected_prev[19] )
		&& ((store_expected_prev[19] !== last_store_exp[19]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port store[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", store_expected_prev);
		$display ("     Real value = %b", store_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_store_exp[19] = store_expected_prev[19];
	end
	if (
		( store_expected_prev[20] !== 1'bx ) && ( store_prev[20] !== store_expected_prev[20] )
		&& ((store_expected_prev[20] !== last_store_exp[20]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port store[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", store_expected_prev);
		$display ("     Real value = %b", store_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_store_exp[20] = store_expected_prev[20];
	end
	if (
		( store_expected_prev[21] !== 1'bx ) && ( store_prev[21] !== store_expected_prev[21] )
		&& ((store_expected_prev[21] !== last_store_exp[21]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port store[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", store_expected_prev);
		$display ("     Real value = %b", store_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_store_exp[21] = store_expected_prev[21];
	end
	if (
		( store_expected_prev[22] !== 1'bx ) && ( store_prev[22] !== store_expected_prev[22] )
		&& ((store_expected_prev[22] !== last_store_exp[22]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port store[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", store_expected_prev);
		$display ("     Real value = %b", store_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_store_exp[22] = store_expected_prev[22];
	end
	if (
		( store_expected_prev[23] !== 1'bx ) && ( store_prev[23] !== store_expected_prev[23] )
		&& ((store_expected_prev[23] !== last_store_exp[23]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port store[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", store_expected_prev);
		$display ("     Real value = %b", store_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_store_exp[23] = store_expected_prev[23];
	end
	if (
		( store_expected_prev[24] !== 1'bx ) && ( store_prev[24] !== store_expected_prev[24] )
		&& ((store_expected_prev[24] !== last_store_exp[24]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port store[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", store_expected_prev);
		$display ("     Real value = %b", store_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_store_exp[24] = store_expected_prev[24];
	end
	if (
		( store_expected_prev[25] !== 1'bx ) && ( store_prev[25] !== store_expected_prev[25] )
		&& ((store_expected_prev[25] !== last_store_exp[25]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port store[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", store_expected_prev);
		$display ("     Real value = %b", store_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_store_exp[25] = store_expected_prev[25];
	end
	if (
		( store_expected_prev[26] !== 1'bx ) && ( store_prev[26] !== store_expected_prev[26] )
		&& ((store_expected_prev[26] !== last_store_exp[26]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port store[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", store_expected_prev);
		$display ("     Real value = %b", store_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_store_exp[26] = store_expected_prev[26];
	end
	if (
		( store_expected_prev[27] !== 1'bx ) && ( store_prev[27] !== store_expected_prev[27] )
		&& ((store_expected_prev[27] !== last_store_exp[27]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port store[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", store_expected_prev);
		$display ("     Real value = %b", store_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_store_exp[27] = store_expected_prev[27];
	end
	if (
		( store_expected_prev[28] !== 1'bx ) && ( store_prev[28] !== store_expected_prev[28] )
		&& ((store_expected_prev[28] !== last_store_exp[28]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port store[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", store_expected_prev);
		$display ("     Real value = %b", store_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_store_exp[28] = store_expected_prev[28];
	end
	if (
		( store_expected_prev[29] !== 1'bx ) && ( store_prev[29] !== store_expected_prev[29] )
		&& ((store_expected_prev[29] !== last_store_exp[29]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port store[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", store_expected_prev);
		$display ("     Real value = %b", store_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_store_exp[29] = store_expected_prev[29];
	end
	if (
		( store_expected_prev[30] !== 1'bx ) && ( store_prev[30] !== store_expected_prev[30] )
		&& ((store_expected_prev[30] !== last_store_exp[30]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port store[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", store_expected_prev);
		$display ("     Real value = %b", store_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_store_exp[30] = store_expected_prev[30];
	end
	if (
		( store_expected_prev[31] !== 1'bx ) && ( store_prev[31] !== store_expected_prev[31] )
		&& ((store_expected_prev[31] !== last_store_exp[31]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port store[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", store_expected_prev);
		$display ("     Real value = %b", store_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_store_exp[31] = store_expected_prev[31];
	end
	if (
		( writeRAMdados_expected_prev !== 1'bx ) && ( writeRAMdados_prev !== writeRAMdados_expected_prev )
		&& ((writeRAMdados_expected_prev !== last_writeRAMdados_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port writeRAMdados :: @time = %t",  $realtime);
		$display ("     Expected value = %b", writeRAMdados_expected_prev);
		$display ("     Real value = %b", writeRAMdados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_writeRAMdados_exp = writeRAMdados_expected_prev;
	end
	if (
		( writeReg_expected_prev !== 1'bx ) && ( writeReg_prev !== writeReg_expected_prev )
		&& ((writeReg_expected_prev !== last_writeReg_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port writeReg :: @time = %t",  $realtime);
		$display ("     Expected value = %b", writeReg_expected_prev);
		$display ("     Real value = %b", writeReg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_writeReg_exp = writeReg_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Teste2_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg [31:0] imediato;
reg reset;
// wires                                               
wire [31:0] dados_escrita;
wire [10:0] end_coluna;
wire [10:0] end_linha;
wire [31:0] out;
wire [1:0] PCflag;
wire [31:0] saida;
wire [31:0] saidaRAMdados;
wire [31:0] store;
wire writeRAMdados;
wire writeReg;

wire sampler;                             

// assign statements (if any)                          
Teste2 i1 (
// port map - connection between master ports and signals/registers   
	.clock(clock),
	.dados_escrita(dados_escrita),
	.end_coluna(end_coluna),
	.end_linha(end_linha),
	.imediato(imediato),
	.out(out),
	.PCflag(PCflag),
	.reset(reset),
	.saida(saida),
	.saidaRAMdados(saidaRAMdados),
	.store(store),
	.writeRAMdados(writeRAMdados),
	.writeReg(writeReg)
);

// reset
initial
begin
	reset = 1'b0;
end 

// clock
always
begin
	clock = 1'b0;
	clock = #100000 1'b1;
	#100000;
end 
// imediato[ 31 ]
initial
begin
	imediato[31] = 1'b0;
end 
// imediato[ 30 ]
initial
begin
	imediato[30] = 1'b0;
end 
// imediato[ 29 ]
initial
begin
	imediato[29] = 1'b0;
end 
// imediato[ 28 ]
initial
begin
	imediato[28] = 1'b0;
end 
// imediato[ 27 ]
initial
begin
	imediato[27] = 1'b0;
end 
// imediato[ 26 ]
initial
begin
	imediato[26] = 1'b0;
end 
// imediato[ 25 ]
initial
begin
	imediato[25] = 1'b0;
end 
// imediato[ 24 ]
initial
begin
	imediato[24] = 1'b0;
end 
// imediato[ 23 ]
initial
begin
	imediato[23] = 1'b0;
end 
// imediato[ 22 ]
initial
begin
	imediato[22] = 1'b0;
end 
// imediato[ 21 ]
initial
begin
	imediato[21] = 1'b0;
end 
// imediato[ 20 ]
initial
begin
	imediato[20] = 1'b0;
end 
// imediato[ 19 ]
initial
begin
	imediato[19] = 1'b0;
end 
// imediato[ 18 ]
initial
begin
	imediato[18] = 1'b0;
end 
// imediato[ 17 ]
initial
begin
	imediato[17] = 1'b0;
end 
// imediato[ 16 ]
initial
begin
	imediato[16] = 1'b0;
end 
// imediato[ 15 ]
initial
begin
	imediato[15] = 1'b0;
end 
// imediato[ 14 ]
initial
begin
	imediato[14] = 1'b0;
end 
// imediato[ 13 ]
initial
begin
	imediato[13] = 1'b0;
end 
// imediato[ 12 ]
initial
begin
	imediato[12] = 1'b0;
end 
// imediato[ 11 ]
initial
begin
	imediato[11] = 1'b0;
end 
// imediato[ 10 ]
initial
begin
	imediato[10] = 1'b0;
end 
// imediato[ 9 ]
initial
begin
	imediato[9] = 1'b0;
end 
// imediato[ 8 ]
initial
begin
	imediato[8] = 1'b0;
end 
// imediato[ 7 ]
initial
begin
	imediato[7] = 1'b0;
end 
// imediato[ 6 ]
initial
begin
	imediato[6] = 1'b0;
end 
// imediato[ 5 ]
initial
begin
	imediato[5] = 1'b0;
end 
// imediato[ 4 ]
initial
begin
	imediato[4] = 1'b0;
end 
// imediato[ 3 ]
initial
begin
	imediato[3] = 1'b0;
end 
// imediato[ 2 ]
initial
begin
	imediato[2] = 1'b0;
end 
// imediato[ 1 ]
initial
begin
	imediato[1] = 1'b0;
end 
// imediato[ 0 ]
initial
begin
	imediato[0] = 1'b0;
end 

Teste2_vlg_sample_tst tb_sample (
	.clock(clock),
	.imediato(imediato),
	.reset(reset),
	.sampler_tx(sampler)
);

Teste2_vlg_check_tst tb_out(
	.dados_escrita(dados_escrita),
	.end_coluna(end_coluna),
	.end_linha(end_linha),
	.out(out),
	.PCflag(PCflag),
	.saida(saida),
	.saidaRAMdados(saidaRAMdados),
	.store(store),
	.writeRAMdados(writeRAMdados),
	.writeReg(writeReg),
	.sampler_rx(sampler)
);
endmodule

