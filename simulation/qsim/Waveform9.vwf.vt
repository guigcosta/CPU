// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/29/2016 11:42:48"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Testef2
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Testef2_vlg_sample_tst(
	botao,
	reset,
	switches,
	sampler_tx
);
input  botao;
input  reset;
input [17:0] switches;
output sampler_tx;

reg sample;
time current_time;
always @(botao or reset or switches)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Testef2_vlg_check_tst (
	AA0,
	AA1,
	AA2,
	AA3,
	AA4,
	AA5,
	AA6,
	AB0,
	AB1,
	AB2,
	AB3,
	AB4,
	AB5,
	AB6,
	DISP2,
	DISP3,
	sampler_rx
);
input  AA0;
input  AA1;
input  AA2;
input  AA3;
input  AA4;
input  AA5;
input  AA6;
input  AB0;
input  AB1;
input  AB2;
input  AB3;
input  AB4;
input  AB5;
input  AB6;
input [6:0] DISP2;
input [6:0] DISP3;
input sampler_rx;

reg  AA0_expected;
reg  AA1_expected;
reg  AA2_expected;
reg  AA3_expected;
reg  AA4_expected;
reg  AA5_expected;
reg  AA6_expected;
reg  AB0_expected;
reg  AB1_expected;
reg  AB2_expected;
reg  AB3_expected;
reg  AB4_expected;
reg  AB5_expected;
reg  AB6_expected;
reg [6:0] DISP2_expected;
reg [6:0] DISP3_expected;

reg  AA0_prev;
reg  AA1_prev;
reg  AA2_prev;
reg  AA3_prev;
reg  AA4_prev;
reg  AA5_prev;
reg  AA6_prev;
reg  AB0_prev;
reg  AB1_prev;
reg  AB2_prev;
reg  AB3_prev;
reg  AB4_prev;
reg  AB5_prev;
reg  AB6_prev;
reg [6:0] DISP2_prev;
reg [6:0] DISP3_prev;

reg  AA0_expected_prev;
reg  AA1_expected_prev;
reg  AA2_expected_prev;
reg  AA3_expected_prev;
reg  AA4_expected_prev;
reg  AA5_expected_prev;
reg  AA6_expected_prev;
reg  AB0_expected_prev;
reg  AB1_expected_prev;
reg  AB2_expected_prev;
reg  AB3_expected_prev;
reg  AB4_expected_prev;
reg  AB5_expected_prev;
reg  AB6_expected_prev;
reg [6:0] DISP2_expected_prev;
reg [6:0] DISP3_expected_prev;

reg  last_AA0_exp;
reg  last_AA1_exp;
reg  last_AA2_exp;
reg  last_AA3_exp;
reg  last_AA4_exp;
reg  last_AA5_exp;
reg  last_AA6_exp;
reg  last_AB0_exp;
reg  last_AB1_exp;
reg  last_AB2_exp;
reg  last_AB3_exp;
reg  last_AB4_exp;
reg  last_AB5_exp;
reg  last_AB6_exp;
reg [6:0] last_DISP2_exp;
reg [6:0] last_DISP3_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:16] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 16'b1;
end

// update real /o prevs

always @(trigger)
begin
	AA0_prev = AA0;
	AA1_prev = AA1;
	AA2_prev = AA2;
	AA3_prev = AA3;
	AA4_prev = AA4;
	AA5_prev = AA5;
	AA6_prev = AA6;
	AB0_prev = AB0;
	AB1_prev = AB1;
	AB2_prev = AB2;
	AB3_prev = AB3;
	AB4_prev = AB4;
	AB5_prev = AB5;
	AB6_prev = AB6;
	DISP2_prev = DISP2;
	DISP3_prev = DISP3;
end

// update expected /o prevs

always @(trigger)
begin
	AA0_expected_prev = AA0_expected;
	AA1_expected_prev = AA1_expected;
	AA2_expected_prev = AA2_expected;
	AA3_expected_prev = AA3_expected;
	AA4_expected_prev = AA4_expected;
	AA5_expected_prev = AA5_expected;
	AA6_expected_prev = AA6_expected;
	AB0_expected_prev = AB0_expected;
	AB1_expected_prev = AB1_expected;
	AB2_expected_prev = AB2_expected;
	AB3_expected_prev = AB3_expected;
	AB4_expected_prev = AB4_expected;
	AB5_expected_prev = AB5_expected;
	AB6_expected_prev = AB6_expected;
	DISP2_expected_prev = DISP2_expected;
	DISP3_expected_prev = DISP3_expected;
end



// expected AA0
initial
begin
	AA0_expected = 1'bX;
end 

// expected AA1
initial
begin
	AA1_expected = 1'bX;
end 

// expected AA2
initial
begin
	AA2_expected = 1'bX;
end 

// expected AA3
initial
begin
	AA3_expected = 1'bX;
end 

// expected AA4
initial
begin
	AA4_expected = 1'bX;
end 

// expected AA5
initial
begin
	AA5_expected = 1'bX;
end 

// expected AA6
initial
begin
	AA6_expected = 1'bX;
end 

// expected AB0
initial
begin
	AB0_expected = 1'bX;
end 

// expected AB1
initial
begin
	AB1_expected = 1'bX;
end 

// expected AB2
initial
begin
	AB2_expected = 1'bX;
end 

// expected AB3
initial
begin
	AB3_expected = 1'bX;
end 

// expected AB4
initial
begin
	AB4_expected = 1'bX;
end 

// expected AB5
initial
begin
	AB5_expected = 1'bX;
end 

// expected AB6
initial
begin
	AB6_expected = 1'bX;
end 
// expected DISP2[ 6 ]
initial
begin
	DISP2_expected[6] = 1'bX;
end 
// expected DISP2[ 5 ]
initial
begin
	DISP2_expected[5] = 1'bX;
end 
// expected DISP2[ 4 ]
initial
begin
	DISP2_expected[4] = 1'bX;
end 
// expected DISP2[ 3 ]
initial
begin
	DISP2_expected[3] = 1'bX;
end 
// expected DISP2[ 2 ]
initial
begin
	DISP2_expected[2] = 1'bX;
end 
// expected DISP2[ 1 ]
initial
begin
	DISP2_expected[1] = 1'bX;
end 
// expected DISP2[ 0 ]
initial
begin
	DISP2_expected[0] = 1'bX;
end 
// expected DISP3[ 6 ]
initial
begin
	DISP3_expected[6] = 1'bX;
end 
// expected DISP3[ 5 ]
initial
begin
	DISP3_expected[5] = 1'bX;
end 
// expected DISP3[ 4 ]
initial
begin
	DISP3_expected[4] = 1'bX;
end 
// expected DISP3[ 3 ]
initial
begin
	DISP3_expected[3] = 1'bX;
end 
// expected DISP3[ 2 ]
initial
begin
	DISP3_expected[2] = 1'bX;
end 
// expected DISP3[ 1 ]
initial
begin
	DISP3_expected[1] = 1'bX;
end 
// expected DISP3[ 0 ]
initial
begin
	DISP3_expected[0] = 1'bX;
end 
// generate trigger
always @(AA0_expected or AA0 or AA1_expected or AA1 or AA2_expected or AA2 or AA3_expected or AA3 or AA4_expected or AA4 or AA5_expected or AA5 or AA6_expected or AA6 or AB0_expected or AB0 or AB1_expected or AB1 or AB2_expected or AB2 or AB3_expected or AB3 or AB4_expected or AB4 or AB5_expected or AB5 or AB6_expected or AB6 or DISP2_expected or DISP2 or DISP3_expected or DISP3)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected AA0 = %b | expected AA1 = %b | expected AA2 = %b | expected AA3 = %b | expected AA4 = %b | expected AA5 = %b | expected AA6 = %b | expected AB0 = %b | expected AB1 = %b | expected AB2 = %b | expected AB3 = %b | expected AB4 = %b | expected AB5 = %b | expected AB6 = %b | expected DISP2 = %b | expected DISP3 = %b | ",AA0_expected_prev,AA1_expected_prev,AA2_expected_prev,AA3_expected_prev,AA4_expected_prev,AA5_expected_prev,AA6_expected_prev,AB0_expected_prev,AB1_expected_prev,AB2_expected_prev,AB3_expected_prev,AB4_expected_prev,AB5_expected_prev,AB6_expected_prev,DISP2_expected_prev,DISP3_expected_prev);
	$display("| real AA0 = %b | real AA1 = %b | real AA2 = %b | real AA3 = %b | real AA4 = %b | real AA5 = %b | real AA6 = %b | real AB0 = %b | real AB1 = %b | real AB2 = %b | real AB3 = %b | real AB4 = %b | real AB5 = %b | real AB6 = %b | real DISP2 = %b | real DISP3 = %b | ",AA0_prev,AA1_prev,AA2_prev,AA3_prev,AA4_prev,AA5_prev,AA6_prev,AB0_prev,AB1_prev,AB2_prev,AB3_prev,AB4_prev,AB5_prev,AB6_prev,DISP2_prev,DISP3_prev);
`endif
	if (
		( AA0_expected_prev !== 1'bx ) && ( AA0_prev !== AA0_expected_prev )
		&& ((AA0_expected_prev !== last_AA0_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AA0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AA0_expected_prev);
		$display ("     Real value = %b", AA0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AA0_exp = AA0_expected_prev;
	end
	if (
		( AA1_expected_prev !== 1'bx ) && ( AA1_prev !== AA1_expected_prev )
		&& ((AA1_expected_prev !== last_AA1_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AA1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AA1_expected_prev);
		$display ("     Real value = %b", AA1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_AA1_exp = AA1_expected_prev;
	end
	if (
		( AA2_expected_prev !== 1'bx ) && ( AA2_prev !== AA2_expected_prev )
		&& ((AA2_expected_prev !== last_AA2_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AA2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AA2_expected_prev);
		$display ("     Real value = %b", AA2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_AA2_exp = AA2_expected_prev;
	end
	if (
		( AA3_expected_prev !== 1'bx ) && ( AA3_prev !== AA3_expected_prev )
		&& ((AA3_expected_prev !== last_AA3_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AA3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AA3_expected_prev);
		$display ("     Real value = %b", AA3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_AA3_exp = AA3_expected_prev;
	end
	if (
		( AA4_expected_prev !== 1'bx ) && ( AA4_prev !== AA4_expected_prev )
		&& ((AA4_expected_prev !== last_AA4_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AA4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AA4_expected_prev);
		$display ("     Real value = %b", AA4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_AA4_exp = AA4_expected_prev;
	end
	if (
		( AA5_expected_prev !== 1'bx ) && ( AA5_prev !== AA5_expected_prev )
		&& ((AA5_expected_prev !== last_AA5_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AA5 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AA5_expected_prev);
		$display ("     Real value = %b", AA5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_AA5_exp = AA5_expected_prev;
	end
	if (
		( AA6_expected_prev !== 1'bx ) && ( AA6_prev !== AA6_expected_prev )
		&& ((AA6_expected_prev !== last_AA6_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AA6 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AA6_expected_prev);
		$display ("     Real value = %b", AA6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_AA6_exp = AA6_expected_prev;
	end
	if (
		( AB0_expected_prev !== 1'bx ) && ( AB0_prev !== AB0_expected_prev )
		&& ((AB0_expected_prev !== last_AB0_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AB0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AB0_expected_prev);
		$display ("     Real value = %b", AB0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_AB0_exp = AB0_expected_prev;
	end
	if (
		( AB1_expected_prev !== 1'bx ) && ( AB1_prev !== AB1_expected_prev )
		&& ((AB1_expected_prev !== last_AB1_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AB1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AB1_expected_prev);
		$display ("     Real value = %b", AB1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_AB1_exp = AB1_expected_prev;
	end
	if (
		( AB2_expected_prev !== 1'bx ) && ( AB2_prev !== AB2_expected_prev )
		&& ((AB2_expected_prev !== last_AB2_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AB2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AB2_expected_prev);
		$display ("     Real value = %b", AB2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_AB2_exp = AB2_expected_prev;
	end
	if (
		( AB3_expected_prev !== 1'bx ) && ( AB3_prev !== AB3_expected_prev )
		&& ((AB3_expected_prev !== last_AB3_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AB3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AB3_expected_prev);
		$display ("     Real value = %b", AB3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_AB3_exp = AB3_expected_prev;
	end
	if (
		( AB4_expected_prev !== 1'bx ) && ( AB4_prev !== AB4_expected_prev )
		&& ((AB4_expected_prev !== last_AB4_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AB4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AB4_expected_prev);
		$display ("     Real value = %b", AB4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_AB4_exp = AB4_expected_prev;
	end
	if (
		( AB5_expected_prev !== 1'bx ) && ( AB5_prev !== AB5_expected_prev )
		&& ((AB5_expected_prev !== last_AB5_exp) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AB5 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AB5_expected_prev);
		$display ("     Real value = %b", AB5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_AB5_exp = AB5_expected_prev;
	end
	if (
		( AB6_expected_prev !== 1'bx ) && ( AB6_prev !== AB6_expected_prev )
		&& ((AB6_expected_prev !== last_AB6_exp) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AB6 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AB6_expected_prev);
		$display ("     Real value = %b", AB6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_AB6_exp = AB6_expected_prev;
	end
	if (
		( DISP2_expected_prev[0] !== 1'bx ) && ( DISP2_prev[0] !== DISP2_expected_prev[0] )
		&& ((DISP2_expected_prev[0] !== last_DISP2_exp[0]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DISP2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DISP2_expected_prev);
		$display ("     Real value = %b", DISP2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_DISP2_exp[0] = DISP2_expected_prev[0];
	end
	if (
		( DISP2_expected_prev[1] !== 1'bx ) && ( DISP2_prev[1] !== DISP2_expected_prev[1] )
		&& ((DISP2_expected_prev[1] !== last_DISP2_exp[1]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DISP2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DISP2_expected_prev);
		$display ("     Real value = %b", DISP2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_DISP2_exp[1] = DISP2_expected_prev[1];
	end
	if (
		( DISP2_expected_prev[2] !== 1'bx ) && ( DISP2_prev[2] !== DISP2_expected_prev[2] )
		&& ((DISP2_expected_prev[2] !== last_DISP2_exp[2]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DISP2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DISP2_expected_prev);
		$display ("     Real value = %b", DISP2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_DISP2_exp[2] = DISP2_expected_prev[2];
	end
	if (
		( DISP2_expected_prev[3] !== 1'bx ) && ( DISP2_prev[3] !== DISP2_expected_prev[3] )
		&& ((DISP2_expected_prev[3] !== last_DISP2_exp[3]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DISP2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DISP2_expected_prev);
		$display ("     Real value = %b", DISP2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_DISP2_exp[3] = DISP2_expected_prev[3];
	end
	if (
		( DISP2_expected_prev[4] !== 1'bx ) && ( DISP2_prev[4] !== DISP2_expected_prev[4] )
		&& ((DISP2_expected_prev[4] !== last_DISP2_exp[4]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DISP2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DISP2_expected_prev);
		$display ("     Real value = %b", DISP2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_DISP2_exp[4] = DISP2_expected_prev[4];
	end
	if (
		( DISP2_expected_prev[5] !== 1'bx ) && ( DISP2_prev[5] !== DISP2_expected_prev[5] )
		&& ((DISP2_expected_prev[5] !== last_DISP2_exp[5]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DISP2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DISP2_expected_prev);
		$display ("     Real value = %b", DISP2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_DISP2_exp[5] = DISP2_expected_prev[5];
	end
	if (
		( DISP2_expected_prev[6] !== 1'bx ) && ( DISP2_prev[6] !== DISP2_expected_prev[6] )
		&& ((DISP2_expected_prev[6] !== last_DISP2_exp[6]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DISP2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DISP2_expected_prev);
		$display ("     Real value = %b", DISP2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_DISP2_exp[6] = DISP2_expected_prev[6];
	end
	if (
		( DISP3_expected_prev[0] !== 1'bx ) && ( DISP3_prev[0] !== DISP3_expected_prev[0] )
		&& ((DISP3_expected_prev[0] !== last_DISP3_exp[0]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DISP3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DISP3_expected_prev);
		$display ("     Real value = %b", DISP3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_DISP3_exp[0] = DISP3_expected_prev[0];
	end
	if (
		( DISP3_expected_prev[1] !== 1'bx ) && ( DISP3_prev[1] !== DISP3_expected_prev[1] )
		&& ((DISP3_expected_prev[1] !== last_DISP3_exp[1]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DISP3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DISP3_expected_prev);
		$display ("     Real value = %b", DISP3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_DISP3_exp[1] = DISP3_expected_prev[1];
	end
	if (
		( DISP3_expected_prev[2] !== 1'bx ) && ( DISP3_prev[2] !== DISP3_expected_prev[2] )
		&& ((DISP3_expected_prev[2] !== last_DISP3_exp[2]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DISP3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DISP3_expected_prev);
		$display ("     Real value = %b", DISP3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_DISP3_exp[2] = DISP3_expected_prev[2];
	end
	if (
		( DISP3_expected_prev[3] !== 1'bx ) && ( DISP3_prev[3] !== DISP3_expected_prev[3] )
		&& ((DISP3_expected_prev[3] !== last_DISP3_exp[3]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DISP3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DISP3_expected_prev);
		$display ("     Real value = %b", DISP3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_DISP3_exp[3] = DISP3_expected_prev[3];
	end
	if (
		( DISP3_expected_prev[4] !== 1'bx ) && ( DISP3_prev[4] !== DISP3_expected_prev[4] )
		&& ((DISP3_expected_prev[4] !== last_DISP3_exp[4]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DISP3[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DISP3_expected_prev);
		$display ("     Real value = %b", DISP3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_DISP3_exp[4] = DISP3_expected_prev[4];
	end
	if (
		( DISP3_expected_prev[5] !== 1'bx ) && ( DISP3_prev[5] !== DISP3_expected_prev[5] )
		&& ((DISP3_expected_prev[5] !== last_DISP3_exp[5]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DISP3[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DISP3_expected_prev);
		$display ("     Real value = %b", DISP3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_DISP3_exp[5] = DISP3_expected_prev[5];
	end
	if (
		( DISP3_expected_prev[6] !== 1'bx ) && ( DISP3_prev[6] !== DISP3_expected_prev[6] )
		&& ((DISP3_expected_prev[6] !== last_DISP3_exp[6]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DISP3[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DISP3_expected_prev);
		$display ("     Real value = %b", DISP3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_DISP3_exp[6] = DISP3_expected_prev[6];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Testef2_vlg_vec_tst();
// constants                                           
// general purpose registers
reg botao;
reg reset;
reg [17:0] switches;
// wires                                               
wire AA0;
wire AA1;
wire AA2;
wire AA3;
wire AA4;
wire AA5;
wire AA6;
wire AB0;
wire AB1;
wire AB2;
wire AB3;
wire AB4;
wire AB5;
wire AB6;
wire [6:0] DISP2;
wire [6:0] DISP3;

wire sampler;                             

// assign statements (if any)                          
Testef2 i1 (
// port map - connection between master ports and signals/registers   
	.AA0(AA0),
	.AA1(AA1),
	.AA2(AA2),
	.AA3(AA3),
	.AA4(AA4),
	.AA5(AA5),
	.AA6(AA6),
	.AB0(AB0),
	.AB1(AB1),
	.AB2(AB2),
	.AB3(AB3),
	.AB4(AB4),
	.AB5(AB5),
	.AB6(AB6),
	.botao(botao),
	.DISP2(DISP2),
	.DISP3(DISP3),
	.reset(reset),
	.switches(switches)
);

// botao
always
begin
	botao = 1'b0;
	botao = #50000 1'b1;
	#50000;
end 

// reset
initial
begin
	reset = 1'b0;
end 
// switches[ 17 ]
initial
begin
	switches[17] = 1'b0;
end 
// switches[ 16 ]
initial
begin
	switches[16] = 1'b0;
end 
// switches[ 15 ]
initial
begin
	switches[15] = 1'b0;
end 
// switches[ 14 ]
initial
begin
	switches[14] = 1'b0;
end 
// switches[ 13 ]
initial
begin
	switches[13] = 1'b0;
end 
// switches[ 12 ]
initial
begin
	switches[12] = 1'b0;
end 
// switches[ 11 ]
initial
begin
	switches[11] = 1'b0;
end 
// switches[ 10 ]
initial
begin
	switches[10] = 1'b0;
end 
// switches[ 9 ]
initial
begin
	switches[9] = 1'b0;
end 
// switches[ 8 ]
initial
begin
	switches[8] = 1'b0;
end 
// switches[ 7 ]
initial
begin
	switches[7] = 1'b0;
end 
// switches[ 6 ]
initial
begin
	switches[6] = 1'b0;
end 
// switches[ 5 ]
initial
begin
	switches[5] = 1'b0;
end 
// switches[ 4 ]
initial
begin
	switches[4] = 1'b0;
end 
// switches[ 3 ]
initial
begin
	switches[3] = 1'b0;
end 
// switches[ 2 ]
initial
begin
	switches[2] = 1'b0;
end 
// switches[ 1 ]
initial
begin
	switches[1] = 1'b0;
end 
// switches[ 0 ]
initial
begin
	switches[0] = 1'b0;
end 

Testef2_vlg_sample_tst tb_sample (
	.botao(botao),
	.reset(reset),
	.switches(switches),
	.sampler_tx(sampler)
);

Testef2_vlg_check_tst tb_out(
	.AA0(AA0),
	.AA1(AA1),
	.AA2(AA2),
	.AA3(AA3),
	.AA4(AA4),
	.AA5(AA5),
	.AA6(AA6),
	.AB0(AB0),
	.AB1(AB1),
	.AB2(AB2),
	.AB3(AB3),
	.AB4(AB4),
	.AB5(AB5),
	.AB6(AB6),
	.DISP2(DISP2),
	.DISP3(DISP3),
	.sampler_rx(sampler)
);
endmodule

