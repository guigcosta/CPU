// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/29/2016 11:27:03"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Testef2
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Testef2_vlg_sample_tst(
	botao,
	reset,
	switches,
	sampler_tx
);
input  botao;
input  reset;
input [17:0] switches;
output sampler_tx;

reg sample;
time current_time;
always @(botao or reset or switches)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Testef2_vlg_check_tst (
	DISP1,
	DISP2,
	DISP3,
	sampler_rx
);
input [6:0] DISP1;
input [6:0] DISP2;
input [6:0] DISP3;
input sampler_rx;

reg [6:0] DISP1_expected;
reg [6:0] DISP2_expected;
reg [6:0] DISP3_expected;

reg [6:0] DISP1_prev;
reg [6:0] DISP2_prev;
reg [6:0] DISP3_prev;

reg [6:0] DISP1_expected_prev;
reg [6:0] DISP2_expected_prev;
reg [6:0] DISP3_expected_prev;

reg [6:0] last_DISP1_exp;
reg [6:0] last_DISP2_exp;
reg [6:0] last_DISP3_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	DISP1_prev = DISP1;
	DISP2_prev = DISP2;
	DISP3_prev = DISP3;
end

// update expected /o prevs

always @(trigger)
begin
	DISP1_expected_prev = DISP1_expected;
	DISP2_expected_prev = DISP2_expected;
	DISP3_expected_prev = DISP3_expected;
end


// expected DISP1[ 6 ]
initial
begin
	DISP1_expected[6] = 1'bX;
end 
// expected DISP1[ 5 ]
initial
begin
	DISP1_expected[5] = 1'bX;
end 
// expected DISP1[ 4 ]
initial
begin
	DISP1_expected[4] = 1'bX;
end 
// expected DISP1[ 3 ]
initial
begin
	DISP1_expected[3] = 1'bX;
end 
// expected DISP1[ 2 ]
initial
begin
	DISP1_expected[2] = 1'bX;
end 
// expected DISP1[ 1 ]
initial
begin
	DISP1_expected[1] = 1'bX;
end 
// expected DISP1[ 0 ]
initial
begin
	DISP1_expected[0] = 1'bX;
end 
// expected DISP2[ 6 ]
initial
begin
	DISP2_expected[6] = 1'bX;
end 
// expected DISP2[ 5 ]
initial
begin
	DISP2_expected[5] = 1'bX;
end 
// expected DISP2[ 4 ]
initial
begin
	DISP2_expected[4] = 1'bX;
end 
// expected DISP2[ 3 ]
initial
begin
	DISP2_expected[3] = 1'bX;
end 
// expected DISP2[ 2 ]
initial
begin
	DISP2_expected[2] = 1'bX;
end 
// expected DISP2[ 1 ]
initial
begin
	DISP2_expected[1] = 1'bX;
end 
// expected DISP2[ 0 ]
initial
begin
	DISP2_expected[0] = 1'bX;
end 
// expected DISP3[ 6 ]
initial
begin
	DISP3_expected[6] = 1'bX;
end 
// expected DISP3[ 5 ]
initial
begin
	DISP3_expected[5] = 1'bX;
end 
// expected DISP3[ 4 ]
initial
begin
	DISP3_expected[4] = 1'bX;
end 
// expected DISP3[ 3 ]
initial
begin
	DISP3_expected[3] = 1'bX;
end 
// expected DISP3[ 2 ]
initial
begin
	DISP3_expected[2] = 1'bX;
end 
// expected DISP3[ 1 ]
initial
begin
	DISP3_expected[1] = 1'bX;
end 
// expected DISP3[ 0 ]
initial
begin
	DISP3_expected[0] = 1'bX;
end 
// generate trigger
always @(DISP1_expected or DISP1 or DISP2_expected or DISP2 or DISP3_expected or DISP3)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected DISP1 = %b | expected DISP2 = %b | expected DISP3 = %b | ",DISP1_expected_prev,DISP2_expected_prev,DISP3_expected_prev);
	$display("| real DISP1 = %b | real DISP2 = %b | real DISP3 = %b | ",DISP1_prev,DISP2_prev,DISP3_prev);
`endif
	if (
		( DISP1_expected_prev[0] !== 1'bx ) && ( DISP1_prev[0] !== DISP1_expected_prev[0] )
		&& ((DISP1_expected_prev[0] !== last_DISP1_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DISP1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DISP1_expected_prev);
		$display ("     Real value = %b", DISP1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DISP1_exp[0] = DISP1_expected_prev[0];
	end
	if (
		( DISP1_expected_prev[1] !== 1'bx ) && ( DISP1_prev[1] !== DISP1_expected_prev[1] )
		&& ((DISP1_expected_prev[1] !== last_DISP1_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DISP1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DISP1_expected_prev);
		$display ("     Real value = %b", DISP1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DISP1_exp[1] = DISP1_expected_prev[1];
	end
	if (
		( DISP1_expected_prev[2] !== 1'bx ) && ( DISP1_prev[2] !== DISP1_expected_prev[2] )
		&& ((DISP1_expected_prev[2] !== last_DISP1_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DISP1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DISP1_expected_prev);
		$display ("     Real value = %b", DISP1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DISP1_exp[2] = DISP1_expected_prev[2];
	end
	if (
		( DISP1_expected_prev[3] !== 1'bx ) && ( DISP1_prev[3] !== DISP1_expected_prev[3] )
		&& ((DISP1_expected_prev[3] !== last_DISP1_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DISP1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DISP1_expected_prev);
		$display ("     Real value = %b", DISP1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DISP1_exp[3] = DISP1_expected_prev[3];
	end
	if (
		( DISP1_expected_prev[4] !== 1'bx ) && ( DISP1_prev[4] !== DISP1_expected_prev[4] )
		&& ((DISP1_expected_prev[4] !== last_DISP1_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DISP1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DISP1_expected_prev);
		$display ("     Real value = %b", DISP1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DISP1_exp[4] = DISP1_expected_prev[4];
	end
	if (
		( DISP1_expected_prev[5] !== 1'bx ) && ( DISP1_prev[5] !== DISP1_expected_prev[5] )
		&& ((DISP1_expected_prev[5] !== last_DISP1_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DISP1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DISP1_expected_prev);
		$display ("     Real value = %b", DISP1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DISP1_exp[5] = DISP1_expected_prev[5];
	end
	if (
		( DISP1_expected_prev[6] !== 1'bx ) && ( DISP1_prev[6] !== DISP1_expected_prev[6] )
		&& ((DISP1_expected_prev[6] !== last_DISP1_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DISP1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DISP1_expected_prev);
		$display ("     Real value = %b", DISP1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DISP1_exp[6] = DISP1_expected_prev[6];
	end
	if (
		( DISP2_expected_prev[0] !== 1'bx ) && ( DISP2_prev[0] !== DISP2_expected_prev[0] )
		&& ((DISP2_expected_prev[0] !== last_DISP2_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DISP2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DISP2_expected_prev);
		$display ("     Real value = %b", DISP2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DISP2_exp[0] = DISP2_expected_prev[0];
	end
	if (
		( DISP2_expected_prev[1] !== 1'bx ) && ( DISP2_prev[1] !== DISP2_expected_prev[1] )
		&& ((DISP2_expected_prev[1] !== last_DISP2_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DISP2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DISP2_expected_prev);
		$display ("     Real value = %b", DISP2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DISP2_exp[1] = DISP2_expected_prev[1];
	end
	if (
		( DISP2_expected_prev[2] !== 1'bx ) && ( DISP2_prev[2] !== DISP2_expected_prev[2] )
		&& ((DISP2_expected_prev[2] !== last_DISP2_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DISP2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DISP2_expected_prev);
		$display ("     Real value = %b", DISP2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DISP2_exp[2] = DISP2_expected_prev[2];
	end
	if (
		( DISP2_expected_prev[3] !== 1'bx ) && ( DISP2_prev[3] !== DISP2_expected_prev[3] )
		&& ((DISP2_expected_prev[3] !== last_DISP2_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DISP2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DISP2_expected_prev);
		$display ("     Real value = %b", DISP2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DISP2_exp[3] = DISP2_expected_prev[3];
	end
	if (
		( DISP2_expected_prev[4] !== 1'bx ) && ( DISP2_prev[4] !== DISP2_expected_prev[4] )
		&& ((DISP2_expected_prev[4] !== last_DISP2_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DISP2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DISP2_expected_prev);
		$display ("     Real value = %b", DISP2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DISP2_exp[4] = DISP2_expected_prev[4];
	end
	if (
		( DISP2_expected_prev[5] !== 1'bx ) && ( DISP2_prev[5] !== DISP2_expected_prev[5] )
		&& ((DISP2_expected_prev[5] !== last_DISP2_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DISP2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DISP2_expected_prev);
		$display ("     Real value = %b", DISP2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DISP2_exp[5] = DISP2_expected_prev[5];
	end
	if (
		( DISP2_expected_prev[6] !== 1'bx ) && ( DISP2_prev[6] !== DISP2_expected_prev[6] )
		&& ((DISP2_expected_prev[6] !== last_DISP2_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DISP2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DISP2_expected_prev);
		$display ("     Real value = %b", DISP2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DISP2_exp[6] = DISP2_expected_prev[6];
	end
	if (
		( DISP3_expected_prev[0] !== 1'bx ) && ( DISP3_prev[0] !== DISP3_expected_prev[0] )
		&& ((DISP3_expected_prev[0] !== last_DISP3_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DISP3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DISP3_expected_prev);
		$display ("     Real value = %b", DISP3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DISP3_exp[0] = DISP3_expected_prev[0];
	end
	if (
		( DISP3_expected_prev[1] !== 1'bx ) && ( DISP3_prev[1] !== DISP3_expected_prev[1] )
		&& ((DISP3_expected_prev[1] !== last_DISP3_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DISP3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DISP3_expected_prev);
		$display ("     Real value = %b", DISP3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DISP3_exp[1] = DISP3_expected_prev[1];
	end
	if (
		( DISP3_expected_prev[2] !== 1'bx ) && ( DISP3_prev[2] !== DISP3_expected_prev[2] )
		&& ((DISP3_expected_prev[2] !== last_DISP3_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DISP3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DISP3_expected_prev);
		$display ("     Real value = %b", DISP3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DISP3_exp[2] = DISP3_expected_prev[2];
	end
	if (
		( DISP3_expected_prev[3] !== 1'bx ) && ( DISP3_prev[3] !== DISP3_expected_prev[3] )
		&& ((DISP3_expected_prev[3] !== last_DISP3_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DISP3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DISP3_expected_prev);
		$display ("     Real value = %b", DISP3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DISP3_exp[3] = DISP3_expected_prev[3];
	end
	if (
		( DISP3_expected_prev[4] !== 1'bx ) && ( DISP3_prev[4] !== DISP3_expected_prev[4] )
		&& ((DISP3_expected_prev[4] !== last_DISP3_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DISP3[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DISP3_expected_prev);
		$display ("     Real value = %b", DISP3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DISP3_exp[4] = DISP3_expected_prev[4];
	end
	if (
		( DISP3_expected_prev[5] !== 1'bx ) && ( DISP3_prev[5] !== DISP3_expected_prev[5] )
		&& ((DISP3_expected_prev[5] !== last_DISP3_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DISP3[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DISP3_expected_prev);
		$display ("     Real value = %b", DISP3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DISP3_exp[5] = DISP3_expected_prev[5];
	end
	if (
		( DISP3_expected_prev[6] !== 1'bx ) && ( DISP3_prev[6] !== DISP3_expected_prev[6] )
		&& ((DISP3_expected_prev[6] !== last_DISP3_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DISP3[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DISP3_expected_prev);
		$display ("     Real value = %b", DISP3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DISP3_exp[6] = DISP3_expected_prev[6];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Testef2_vlg_vec_tst();
// constants                                           
// general purpose registers
reg botao;
reg reset;
reg [17:0] switches;
// wires                                               
wire [6:0] DISP1;
wire [6:0] DISP2;
wire [6:0] DISP3;

wire sampler;                             

// assign statements (if any)                          
Testef2 i1 (
// port map - connection between master ports and signals/registers   
	.botao(botao),
	.DISP1(DISP1),
	.DISP2(DISP2),
	.DISP3(DISP3),
	.reset(reset),
	.switches(switches)
);

// botao
always
begin
	botao = 1'b0;
	botao = #50000 1'b1;
	#50000;
end 

// reset
initial
begin
	reset = 1'b0;
end 
// switches[ 17 ]
initial
begin
	switches[17] = 1'b0;
end 
// switches[ 16 ]
initial
begin
	switches[16] = 1'b0;
end 
// switches[ 15 ]
initial
begin
	switches[15] = 1'b0;
end 
// switches[ 14 ]
initial
begin
	switches[14] = 1'b0;
end 
// switches[ 13 ]
initial
begin
	switches[13] = 1'b0;
end 
// switches[ 12 ]
initial
begin
	switches[12] = 1'b0;
end 
// switches[ 11 ]
initial
begin
	switches[11] = 1'b0;
end 
// switches[ 10 ]
initial
begin
	switches[10] = 1'b0;
end 
// switches[ 9 ]
initial
begin
	switches[9] = 1'b0;
end 
// switches[ 8 ]
initial
begin
	switches[8] = 1'b0;
end 
// switches[ 7 ]
initial
begin
	switches[7] = 1'b0;
end 
// switches[ 6 ]
initial
begin
	switches[6] = 1'b0;
end 
// switches[ 5 ]
initial
begin
	switches[5] = 1'b0;
end 
// switches[ 4 ]
initial
begin
	switches[4] = 1'b0;
end 
// switches[ 3 ]
initial
begin
	switches[3] = 1'b0;
end 
// switches[ 2 ]
initial
begin
	switches[2] = 1'b0;
end 
// switches[ 1 ]
initial
begin
	switches[1] = 1'b0;
end 
// switches[ 0 ]
initial
begin
	switches[0] = 1'b0;
end 

Testef2_vlg_sample_tst tb_sample (
	.botao(botao),
	.reset(reset),
	.switches(switches),
	.sampler_tx(sampler)
);

Testef2_vlg_check_tst tb_out(
	.DISP1(DISP1),
	.DISP2(DISP2),
	.DISP3(DISP3),
	.sampler_rx(sampler)
);
endmodule

